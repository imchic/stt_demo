import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:get/get.dart';
import 'package:ldi/routes/app_route.dart';
import 'package:ldi/screens/accdtlnvstg/datasource/accdtlnvstg_lad_datasource.dart';
import 'package:ldi/screens/accdtlnvstg/datasource/model/accdtlnvstg_lad_model.dart';
import 'package:ldi/screens/login/login_controller.dart';
import 'package:ldi/screens/owner/datasource/owner_datasource.dart';
import 'package:ldi/utils/applog.dart';

import 'package:syncfusion_flutter_datagrid/datagrid.dart';

import '../components/base_header.dart';
import '../components/custom_grid.dart';
import '../components/custom_radio.dart';
import '../utils/colors.dart';
import '../utils/dialog_util.dart';
import '../widget/accdt_invstg_widget.dart';
import '../widget/bsns_widget.dart';
import '../widget/cstmr_widget.dart';
import '../widget/owner_widget.dart';
import '../widget/sttus_widget.dart';
import 'gis/gis_screen.dart';
import 'owner/lad/model/owner_lad_info_datasource_model.dart';
import 'lp_controller.dart';
import 'bsns/sqnc/model/bsns_accdtinvstg_sqnc_model.dart';
import 'bsns/select/bsns_plan_select_area_model.dart';

/// [lpScreen] ÏÇ¨ÏóÖÏÑ†ÌÉù ÌôîÎ©¥
class lpScreen extends GetView<LpController> {
  const lpScreen({super.key});

  @override
  Widget build(BuildContext context) {
    Get.put(LpController());

    return Scaffold(
      resizeToAvoidBottomInset: true,
      drawerEnableOpenDragGesture: false, // Ïó£ÏßÄ Ïä§ÏôÄÏù¥ÌîÑ ÎπÑÌôúÏÑ±Ìôî
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: Row(
                children: [
                  // ÏôºÏ™Ω Î©îÎâ¥ Î≤ÑÌäº
                  Container(child: lnbWidget()),
                  // Î©îÏù∏ Î∑∞
                  Expanded(
                    child: Obx(
                      () => PageView(
                        physics: NeverScrollableScrollPhysics(),
                        controller: controller.pageController,
                        onPageChanged: (index) {
                          controller.selectedIndex.value = index;
                          controller.isBsnsZoneSelectFlag.value = false;
                          controller.isBsnsSqncSelectFlag.value = false;
                          controller.isBsnsSelectFlag.value = false;

                          // ÏÇ¨ÏóÖÍµ¨Ïó≠ ÏÑ†ÌÉùÏù¥ ÏïàÎêêÏùÑ Í≤ΩÏö∞
                          if (controller.selectedBsnsSelectArea.value.bsnsNo ==
                                  null &&
                              controller.selectedBsnsSelectArea.value
                                      .bsnsZoneNo ==
                                  null) {
                            DialogUtil.showSnackBar(
                                context, 'ÏÇ¨ÏóÖÍµ¨Ïó≠', 'ÏÇ¨ÏóÖÍµ¨Ïó≠ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
                            controller.pageController.jumpToPage(0);
                            return;
                          }

                          if (index == 1 || index == 4) {
                            /// [ÏÜåÏú†Ïûê Î∞è Í¥ÄÎ¶¨Ïù∏] Ï°∞Ìöå
                            controller.fetchOwnerDataSource();
                          }

                          if (index == 3) {
                            /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥] Ï°∞Ìöå
                            controller.fetchLadSttusInqireDataSource();
                            controller.fetchObstSttusInqireDataSource();
                          }
                        },
                        children: [
                          /// [ÏÇ¨ÏóÖÏÑ†ÌÉù] ÌôîÎ©¥
                          Column(
                            children: [
                              BaseHeader(
                                LoginController.to.loginType.value,
                              ),
                              Expanded(
                                  child: Row(
                                children: [
                                  Expanded(
                                      flex: 1,
                                      child:
                                          controller.isGisOpenFlag.value == true
                                              ? GisScreen(type: 'parcel')
                                              : BsnsWidget.buildBsnsListView(
                                                  controller)),
                                  // Ïò§Î•∏Ï™Ω Î∑∞
                                  Obx(() {
                                    return Expanded(
                                      flex: controller.isBsnsSelectFlag == true
                                          ? 1
                                          : 0,
                                      child: Column(
                                        children: [
                                          if (controller.selectedIndex.value ==
                                              0)

                                            // ÏÇ¨ÏóÖÍµ¨Ïó≠
                                            controller.isBsnsSelectFlag == true
                                                ? BsnsWidget
                                                    .buildBsnsSelectZoneContainer(
                                                        controller)
                                                : Container(),

                                          // Ï°∞ÏÇ¨Ï∞®Ïàò
                                          controller.isBsnsZoneSelectFlag ==
                                                  true
                                              ? BsnsWidget
                                                  .buildBsnsSelectSqncContainer(
                                                      controller)
                                              : Container(),
                                        ],
                                      ),
                                    );
                                  }),
                                ],
                              )),
                            ],
                          ),

                          /// [ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨] ÌôîÎ©¥
                          Column(
                            children: [
                              BaseHeader(
                                LoginController.to.loginType.value,
                              ),
                              Expanded(
                                  child:
                                      OwnerWidget.buildOwnerView(controller)),
                            ],
                          ),

                          /// [Ïã§ÌÉúÏ°∞ÏÇ¨] ÌôîÎ©¥
                          Column(
                            children: [
                              BaseHeader(
                                LoginController.to.loginType.value,
                              ),
                              controller.selectSqnc.value.accdtInvstgSqnc !=
                                      null
                                  ? Expanded(
                                      child: AccdtInvstgWidget
                                          .buildAccdtInvstgView(controller))
                                  : Expanded(
                                      child: Center(
                                        child: AutoSizeText(
                                          'Ï°∞ÏÇ¨Ï∞®ÏàòÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.',
                                          style: TextStyle(
                                              color: Color(0xFF1D1D1D),
                                              fontSize: 40.sp,
                                              fontWeight: FontWeight.w500),
                                        ),
                                      ),
                                    ),
                            ],
                          ),

                          /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥] ÌôîÎ©¥
                          //Center(child: AutoSizeText('ÌÜµÍ≥ÑÏ†ïÎ≥¥ Í∞úÎ∞ú Ï§ÄÎπÑÏ§ëÏûÖÎãàÎã§ üòÉ')),
                          Column(
                            children: [
                              BaseHeader(
                                LoginController.to.loginType.value,
                              ),
                              Expanded(
                                  child:
                                      SttusWidget.buildSttusView(controller)),
                            ],
                          ),

                          /// [Í≥†Í∞ùÏπ¥Îìú] ÌôîÎ©¥
                          // Center(child: AutoSizeText('Í≥†Í∞ùÏπ¥Îìú Í∞úÎ∞ú Ï§ÄÎπÑÏ§ëÏûÖÎãàÎã§ üòÉ')),
                          Column(
                            children: [
                              BaseHeader(
                                LoginController.to.loginType.value,
                              ),
                              Expanded(
                                  child: CstmrCardWidget.buildCstmrCard(
                                      controller))
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),

                  /// Ïä¨ÎùºÏù¥Îìú Ìå®ÎÑê
                  InkWell(
                      onTap: () {
                        controller.isGisOpenFlag.value =
                            !controller.isGisOpenFlag.value;
                      },
                      child: Obx(() =>
                        Center(
                          child: controller.isGisOpenFlag.value
                              ? SvgPicture.asset(
                                  'assets/icons/ic_gis_open.svg',
                                )
                              : SvgPicture.asset(
                                  'assets/icons/ic_gis_close.svg',
                                ),
                        ),
                      )),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// [lnbWidget] ÏôºÏ™Ω Î©îÎâ¥ Î≤ÑÌäº
  Widget lnbWidget() {
    return Obx(
      () => Container(
        width: 210.w,
        decoration: BoxDecoration(
          color: lnbBg,
        ),
        child: Column(
          children: [
            Container(
              //width: 208.w,
              width: 208.w,
              height: 160.h,
              clipBehavior: Clip.antiAlias,
              decoration: BoxDecoration(
                color: Color(0xFF667185),
                // color: Colors.red,
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Container(
                    //color: Colors.green,
                    child: SvgPicture.asset(
                      'assets/icons/ic_kwater_logo.svg',
                      width: 136.w,
                      height: 64.h,
                      fit: BoxFit.contain,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: controller.leftNavItems.length,
                itemBuilder: (context, index) {
                  return Obx(() {
                    return InkWell(
                        onTap: () {
                          //controller.selectedIndex.value = index;
                          controller.pageController.jumpToPage(index);
                        },
                        child: Container(
                          width: 208.w,
                          height: 160.h,
                          padding: EdgeInsets.symmetric(horizontal: 40.w),
                          decoration: BoxDecoration(
                            color: controller.selectedIndex.value == index
                                ? Color(0xFF2287EF)
                                : Colors.transparent,
                          ),
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Container(
                                width: 40.w,
                                height: 40.h,
                                child: SvgPicture.asset(
                                    'assets/icons/ic_menu_${index + 1}.svg',
                                    color: Colors.white),
                              ),
                              SizedBox(height: 8.h),
                              AutoSizeText(controller.leftNavItems[index],
                                  maxFontSize: 20,
                                  style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 30.sp,
                                      fontWeight: FontWeight.w500),
                                  //overflow: TextOverflow.ellipsis,
                                  textAlign: TextAlign.center),
                            ],
                          ),
                        ));
                  });
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// [buildTable] ÌÖåÏù¥Î∏î
  Widget buildTable() {
    return Container(
      width: double.infinity,
      child: Table(
        columnWidths: const {
          0: FlexColumnWidth(0.35),
          1: FlexColumnWidth(2),
        },
        //defaultColumnWidth: const FlexColumnWidth(1),
        border: TableBorder.all(color: gray300),
        children: [
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                    'Í¥ÄÎ†®Í≥†ÏãúÎ≤àÌò∏',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Color(0xFF1D1D1D),
                      fontSize: 30.sp,
                      fontWeight: FontWeight.w700,
                      overflow: TextOverflow.ellipsis,
                    ),
                    maxLines: 2,
                  )),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.gztNtfcNoDtls ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 32.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                    'ÏãúÌñâÎ∞©Î≤ï',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Color(0xFF1D1D1D),
                      fontSize: 30.sp,
                      fontWeight: FontWeight.w700,
                    ),
                  )),
                ),
              ),
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.enfcMthDtls ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 32.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                    child: AutoSizeText(
                      'ÏÇ¨ÏóÖÎ™©Ï†Å',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        color: Color(0xFF1D1D1D),
                        fontSize: 30.sp,
                        fontWeight: FontWeight.w700,
                      ),
                    ),
                  ),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.bsnsPurpsDtls ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 32.sp,
                      fontFamily: 'Pretendard',
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                    'ÏÇ¨ÏóÖÍ∑úÎ™®',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Color(0xFF1D1D1D),
                      fontSize: 30.sp,
                      fontWeight: FontWeight.w700,
                    ),
                  )),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.bsnsScaleInfo ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 32.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                    'Í∑ºÍ±∞Î≤ïÎ†π',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Color(0xFF1D1D1D),
                      fontSize: 30.sp,
                      fontWeight: FontWeight.w700,
                    ),
                  )),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.bsnsBasisLawordInfo ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 32.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// [gridColumn] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú Ïª¨Îüº
  GridColumn gridColumn(String columnName, String label,
      {bool? isVisble, double? width}) {
    return GridColumn(
        width: width ?? double.nan,
        columnName: columnName,
        visible: isVisble ?? true,
        label: Center(
          child: AutoSizeText(label,
              maxFontSize: 20,
              maxLines: 2,
              textAlign: TextAlign.center,
              style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 24.sp,
                  overflow: TextOverflow.ellipsis,
                  color: tableTextColor)),
        ));
  }

  ///  ÏÇ¨ÏóÖÏÑ†ÌÉù -> ÏÇ¨ÏóÖÍµ¨Ïó≠ ÏÑ†ÌÉù
  Widget buildBsnsSelectAreaListDataGrid() {
    return CustomGrid(
      dataSource: controller.bsnsListDataSource.value,
      controller: controller.bsnsListDataGridController,
      isSort: false,
      isSelect: false,
      columnWidthMode: ColumnWidthMode.fill,
      columns: [
        gridColumn('bsnsZoneNo', 'ÏÇ¨ÏóÖÍµ¨Ïó≠Î≤àÌò∏'),
        gridColumn('bsnsZoneNm', 'ÏÇ¨ÏóÖÍµ¨Ïó≠Î™Ö'),
        gridColumn('lotCnt', 'ÌïÑÏßÄÏàò'),
        gridColumn('bsnsAra', 'Î©¥Ï†Å(„é°)'),
        gridColumn('bsnsReadngPblancDe', 'Ïó¥ÎûåÍ≥µÍ≥†Ïùº'),
      ],
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) async {
        if (addedRows.isEmpty) return;

        final index =
            controller.bsnsListDataSource.value.rows.indexOf(addedRows.first);
        var getRow = controller.bsnsListDataSource.value.rows[index];

        var bsnsNo = controller.selectBsnsPlan.value.bsnsNo;
        var bsnsZoneNo = getRow.getCells()[0].value;
        var bsnsZoneNm = getRow.getCells()[1].value;
        var lotCnt = getRow.getCells()[2].value;
        var bsnsAra = getRow.getCells()[3].value;
        var bsnsReadngPblancDe = getRow.getCells()[4].value;

        AppLog.d(
            'ÏÇ¨ÏóÖÍµ¨Ïó≠ ÏÑ†ÌÉù: $bsnsNo, $bsnsZoneNo, $bsnsZoneNm, $lotCnt, $bsnsAra, $bsnsReadngPblancDe');

        AppLog.d('ÏÑ†ÌÉùÎêú ÏÇ¨ÏóÖÎ≤àÌò∏: ${controller.selectBsnsPlan.value.bsnsNo}');
        AppLog.d('ÏÑ†ÌÉùÎêú ÏÇ¨ÏóÖÍµ¨Ïó≠Î≤àÌò∏: $bsnsZoneNo');

        controller.selectedBsnsSelectArea.value = BsnsPlanSelectAreaModel(
          bsnsNo: num.parse(bsnsNo.toString()),
          bsnsZoneNo: bsnsZoneNo,
          bsnsZoneNm: bsnsZoneNm,
          lotCnt: lotCnt.toString(),
          bsnsAra: bsnsAra.toString(),
          bsnsReadngPblancDe: bsnsReadngPblancDe,
        );

        controller.fetchOwnerDataSource();
        await controller.fetchBsnsSelectAreaGetSqncDataSource();

        controller.isBsnsZoneSelectFlag.value = true;
        controller.isBsnsSqncSelectFlag.value = false;
      }),
    );
  }

  // ÏÇ¨ÏóÖÏÑ†ÌÉù -> Ï°∞ÏÇ¨ Ï∞®Ïàò
  Widget buildBsnsSqncDataGrid() {
    return CustomGrid(
      dataSource: controller.bsnsAccdtinvstgSqncDataSource.value,
      controller: controller.bsnsOrderDataGridController,
      columnWidthMode: ColumnWidthMode.auto,
      isSort: false,
      isSelect: false,
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        if (addedRows.isEmpty) return;

        final index = controller.bsnsAccdtinvstgSqncDataSource.value.rows
            .indexOf(addedRows.first);
        var getRow = controller.bsnsAccdtinvstgSqncDataSource.value.rows[index];

        var accdtInvstgSqnc = getRow.getCells()[2].value;
        var accdtInvstgNm = getRow.getCells()[3].value;
        var frstRgstrId = getRow.getCells()[5].value;
        var frstRegistDt = getRow.getCells()[6].value;
        var lastUpdusrId = getRow.getCells()[7].value;
        var lastUpdtDt = getRow.getCells()[8].value;

        var sqnc = BsnsAccdtinvstgSqncModel(
          accdtInvstgSqnc: accdtInvstgSqnc,
          accdtInvstgNm: accdtInvstgNm,
          frstRgstrId: frstRgstrId,
          frstRegistDt: frstRegistDt,
          lastUpdusrId: lastUpdusrId,
          lastUpdtDt: lastUpdtDt,
        );

        controller.selectSqnc.value = sqnc;

        controller.fetchAccdtlnvstgSearchDataSource();
        controller.fetchAccdtlnvstgObstDataSource();
      }),
      columns: [
        gridColumn('bsnsNo', 'ÏÇ¨ÏóÖÎ≤àÌò∏', isVisble: false),
        gridColumn('bsnsZoneNo', 'ÏÇ¨ÏóÖÍµ¨Ïó≠Î≤àÌò∏', isVisble: false),
        gridColumn('accdtInvstgSqnc', 'Ï∞®Ïàò', width: 60),
        gridColumn('accdtInvstgNm', 'Ï°∞ÏÇ¨Î™Ö', width: 250),
        gridColumn('delYn', 'ÏÇ≠Ï†úÏó¨Î∂Ä', isVisble: false),
        gridColumn('frstRgstrId', 'ÏµúÏ¥àÎì±Î°ùÏûê', isVisble: false),
        gridColumn('frstRegistDt', 'Îì±Î°ùÏùº', width: 100),
        gridColumn('lastUpdusrId', 'ÏµúÏ¢ÖÏàòÏ†ïÏûê', isVisble: false),
        gridColumn('lastUpdtDt', 'ÏàòÏ†ïÏùº'),
        gridColumn('conectIp', 'Ï†ëÏÜçIP', isVisble: false, width: 100),
      ],
    );
  }

  /// ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨ -> ÏÜåÏú†ÏûêÍ≤ÄÏÉâ
  Widget buildOwnerListDataGrid(OwnerDatasource source) {
    return CustomGrid(
      dataSource: controller.ownerListDataSource.value,
      controller: controller.ownerListDataGridController,
      isSort: true,
      columnWidthMode: ColumnWidthMode.fill,
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        AppLog.d(
            'buildBsnsOwnerDataGrid> ÏÑ†ÌÉùÎêú ÏÜåÏú†ÏûêÎ≤àÌò∏ > ${addedRows.first.getCells()[0].value}');
        var ownerNum = addedRows.first.getCells()[0].value;

        controller.fetchOwnerLadInfoDataSource(ownerNum);
        controller.fetchOwnerObstInfoDataSource(ownerNum);
        controller.fetchOwnerInfo(ownerNum);

        if (controller.selectedIndex.value == 1) {
          controller.bsnsOwnerTabController.animateTo(1);
        }

        if (controller.selectedIndex.value == 4) {
          /***
           * Í≥†Í∞ùÏπ¥ÎìúÏùò ÌÜ†ÏßÄ, ÏßÄÏû•Î¨º, Í≥†Í∞ùÏ†ïÎ≥¥Î•º Ï°∞ÌöåÌïúÎã§.
           * land - ÌÜ†ÏßÄ,
           * obst - ÏßÄÏû•Î¨º,
           * List - ÎÇ¥Ïó≠,
           * Partcpnt - Í¥ÄÍ≥ÑÏù∏,
           * Cmpnstn - ÌòëÏùòÎÇ¥Ïó≠,
           * Aceptnc - ÏàòÏö©Ïû¨Í≤∞,
           * Objc - Ïù¥ÏùòÏû¨Í≤∞,
           * Lwst - ÏÜåÏÜ°,
           * Reprchs - ÌôòÎß§,
           * Confirm - ÏàòÏö©ÌôïÏù∏Ïõê,
           * Fobjct - Ïù¥ÏùòÏã†Ï≤≠
           */

          // Í¥ÄÍ≥ÑÏù∏ (ÌÜ†ÏßÄ)
          controller.fetchCstmrCardLadPartcpntInfoDataSource(ownerNum);
          // Í¥ÄÍ≥ÑÏù∏ (ÏßÄÏû•Î¨º)
          controller.fetchCstmrCardObstPartcpntInfoDataSource(ownerNum);

          // ÌòëÏùòÎÇ¥Ïó≠
          controller.fetchCstmrCardLadCmpnstnInfoDataSource(ownerNum);

          // ÏàòÏö©Ïû¨Í≤∞ (ÌÜ†ÏßÄ)
          controller.fetchCstmrCardLadAceptncInfoDataSource(ownerNum);
          // ÏàòÏö©Ïû¨Í≤∞ (ÏßÄÏû•Î¨º)
          controller.fetchCstmrCardObstAceptncInfoDataSource(ownerNum);

          // Ïù¥ÏùòÏû¨Í≤∞ (ÌÜ†ÏßÄ)
          controller.fetchCstmrCardLadObjcInfoDataSource(ownerNum);
          // Ïù¥ÏùòÏû¨Í≤∞ (ÏßÄÏû•Î¨º)
          controller.fetchCstmrCardObstObjcInfoDataSource(ownerNum);

          // ÏÜåÏÜ° (ÌÜ†ÏßÄ)
          controller.fetchCstmrCardLadLwstInfoDataSource(ownerNum);
          // ÏÜåÏÜ° (ÏßÄÏû•Î¨º)
          controller.fetchCstmrCardObstLwstInfoDataSource(ownerNum);

          // ÌôòÎß§
          controller.fetchCstmrCardReprchsInfoDataSource(ownerNum);

          // ÌÜ†ÏßÄÏàòÏö©ÌôïÏù∏Ïõê
          controller.fetchCstmrCardConfirmInfoDataSource(ownerNum);

          // Ïù¥ÏùòÏã†Ï≤≠
          controller.fetchCstmrCardFobjctInfoDataSource(ownerNum);
        }
      }),
      columns: [
        gridColumn('ownerNo', 'ÏÜåÏú†ÏûêÎ≤àÌò∏', width: 100),
        gridColumn('ownerNm', 'ÏÜåÏú†ÏûêÎ™Ö', width: 100),
        // gridColumn('posesnDivCd', 'ÏÜåÏú†ÏûêÍµ¨Î∂Ñ', width: 60),
        gridColumn('posesnDivNm', 'Íµ¨Î∂Ñ', width: 60),
        // gridColumn('bsnsNo', 'ÏÇ¨ÏóÖÎ≤àÌò∏', isVisble: false),
        // gridColumn('bsnsZoneNo', 'ÏÇ¨ÏóÖÍµ¨Ïó≠Î≤àÌò∏', isVisble: false),
        gridColumn('ownerRgsbukAddr', 'Îì±Í∏∞Î∂ÄÏ£ºÏÜå', width: double.nan),
        gridColumn('ownerRrnEnc', 'Îì±Î°ùÎ≤àÌò∏', width: 130),
        // gridColumn('oldRegno', 'Íµ¨Ï£ºÎØºÎì±Î°ùÎ≤àÌò∏', isVisble: false),
        gridColumn('ownerTelno', 'Ï†ÑÌôîÎ≤àÌò∏', width: 130),
        gridColumn('ownerMbtlnum', 'Ìú¥ÎåÄÌè∞Î≤àÌò∏', width: 130),
        // gridColumn('rgsbukZip', 'Îì±Í∏∞Î∂ÄÎ≤àÏßÄ', isVisble: false),
        // gridColumn('delvyZip', 'Ï†ÑÏÜ°Î∂ÄÎ≤àÏßÄ', isVisble: false),
        // gridColumn('moisZip', 'Î™®ÏûÑÎ∂ÄÎ≤àÏßÄ', isVisble: false),
        // gridColumn('ownerDelvyAddr', 'Ï†ÑÏÜ°Î∂ÄÏ£ºÏÜå', isVisble: false),
        // gridColumn('ownerMoisAddr', 'Î™®ÏûÑÎ∂ÄÏ£ºÏÜå', isVisble: false),
        // gridColumn('accdtInvstgRm', 'Ï°∞ÏÇ¨Ïã§', isVisble: false),
        // gridColumn('frstRgstrId', 'ÏµúÏ¥àÎì±Î°ùÏûê', isVisble: false),
        // gridColumn('frstRegistDt', 'Îì±Î°ùÏùº', isVisble: false),
        // gridColumn('lastUpdusrId', 'ÏµúÏ¢ÖÏàòÏ†ïÏûê', isVisble: false),
        // gridColumn('lastUpdtDt', 'ÏàòÏ†ïÏùº', isVisble: false),
        // gridColumn('conectIp', 'Ï†ëÏÜçIP', isVisble: false),
        // gridColumn('thingCnt', 'Î¨ºÍ±¥Ïàò', isVisble: false),
        // gridColumn('bsnsCnt', 'ÏÇ¨ÏóÖÏàò', isVisble: false),
        // gridColumn('realOwnerNo', 'Ïã§ÏÜåÏú†ÏûêÎ≤àÌò∏', isVisble: false),
        // gridColumn('ownerDivCd', 'ÏÜåÏú†ÏûêÍµ¨Î∂Ñ', isVisble: false),
        // gridColumn('ownerRgsbukAddrFull', 'Îì±Í∏∞Î∂ÄÏ£ºÏÜåÏ†ÑÏ≤¥', isVisble: false),
        // gridColumn('ownerDelvyAddrFull', 'Ï†ÑÏÜ°Î∂ÄÏ£ºÏÜåÏ†ÑÏ≤¥', isVisble: false),
        // gridColumn('ownerMoisAddrFull', 'Î™®ÏûÑÎ∂ÄÏ£ºÏÜåÏ†ÑÏ≤¥', isVisble: false),
      ],
    );
  }

  /// ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨ -> ÏÜåÏú†ÏûêÍ≤ÄÏÉâ -> ÌÜ†ÏßÄ
  Widget buildOwnerLadInfoDataGrid() {
    return CustomGrid(
      dataSource: controller.ownerLadInfoDataSource.value,
      controller: controller.ownerLadInfoDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      freezeColumnCount: 4,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['ofcbkLndcgrDivNm', 'sttusLndcgrDivNm'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÎ™©',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['ofcbkAra', 'incrprAra', 'cmpnstnInvstgAra'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î©¥Ï†Å(„é°)',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
        ]),
      ],
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        final index = controller.ownerLadInfoDataSource.value.rows
            .indexOf(addedRows.first);
        var getRow = controller.ownerLadInfoDataSource.value.rows[index];

        var data = OwnerLadInfoDatasourceModel(
          lgdongNm: getRow.getCells()[0].value,
          lcrtsDivNm: getRow.getCells()[1].value,
          mlnoLtno: getRow.getCells()[2].value,
          slnoLtno: getRow.getCells()[3].value,
          ofcbkLndcgrDivCd: getRow.getCells()[4].value,
          sttusLndcgrDivCd: getRow.getCells()[5].value,
          ofcbkAra: getRow.getCells()[6].value,
          incrprAra: getRow.getCells()[7].value,
          cmpnstnInvstgAra: getRow.getCells()[8].value,
          acqsPrpDivCd: getRow.getCells()[9].value,
          aceptncUseDivCd: getRow.getCells()[10].value,
          accdtInvstgSqnc: num.parse(getRow.getCells()[11].value),
          invstgDt: getRow.getCells()[12].value,
          cmpnstnStepDivCd: getRow.getCells()[13].value,
          cmpnstnDtaChnStatDivCd: getRow.getCells()[13].value,
          accdtInvstgRm: getRow.getCells()[14].value,
        );

        AppLog.i('buildOwnerLadInfoDataGrid > ÏÑ†ÌÉùÎêú ÌÜ†ÏßÄ Ï†ïÎ≥¥: ${data.toJson()}');
      }),
      columns: [
        gridColumn('lgdongNm', 'ÏÜåÏû¨ÏßÄ', width: 200),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ', width: 40),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à', width: 50),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à', width: 50),
        gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂Ä', width: 60),
        gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©', width: 60),
        gridColumn('ofcbkAra', 'Í≥µÎ∂Ä', width: 60),
        gridColumn('incrprAra', 'Ìé∏ÏûÖ', width: 60),
        gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨', width: 60),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ', width: 60),
        gridColumn('aceptncUseDivNm', 'ÏàòÏö©/ÏÇ¨Ïö©', width: 60),
        gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 60),
        gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº', width: 100),
        gridColumn('cmpnstnStepDivCdNm', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ', width: 80),
        gridColumn('eaccdtInvstgRmtc', 'ÎπÑÍ≥†', width: 300),
      ],
    );
  }

  /// ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨ -> ÏÜåÏú†ÏûêÍ≤ÄÏÉâ -> ÏßÄÏû•Î¨º
  Widget buildOwnerObstInfoDataGrid() {
    return CustomGrid(
      dataSource: controller.ownerObstInfoDataSource.value,
      controller: controller.ownerObstInfoDataGridController,
      columnWidthMode: ColumnWidthMode.fill,
      freezeColumnCount: 4,
      isSort: false,
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        final index = controller.ownerObstInfoDataSource.value.rows
            .indexOf(addedRows.first);
        var getRow = controller.ownerObstInfoDataSource.value.rows[index];
      }),
      columns: [
        gridColumn('lgdongNm', 'ÏÜåÏû¨ÏßÄ', width: 200),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ', width: 60),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à', width: 60),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à', width: 60),
        gridColumn('cmpnstnObstNo', 'ÏßÄÏû•Î¨ºÏàúÎ≤à', width: 80),
        gridColumn('obstDivNm', 'ÏßÄÏû•Î¨ºÍµ¨Î∂Ñ', width: 80),
        gridColumn('cmpnstnThingKndDtls', 'Î¨ºÍ±¥ÏùòÏ¢ÖÎ•ò', width: 80),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞ Î∞è Í∑úÍ≤©', width: 80),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâ(Î©¥Ï†Å)', width: 80),
        gridColumn('cmpnstnThingUnitDivNm', 'Îã®ÏúÑ', width: 60),
        gridColumn('acqsPrpDivCd', 'Ï∑®ÎìùÏö©ÎèÑ', width: 80),
        gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 60),
        gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº', width: 80),
        gridColumn('cmpnstnStepDivNm', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ', width: 80),
        gridColumn('spcitm', 'ÌäπÏù¥ÏÇ¨Ìï≠', width: 80),
      ],
    );
  }

  // Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÌÜ†ÏßÄÎ≥¥ÏÉÅ ÎåÄÏÉÅ Í∏∞Ï§Ä Ï†ïÎ≥¥
  Widget buildLadAccdtlnvstgDataGrid() {
    return CustomGrid(
        dataSource: controller.accdtlnvstgLadDataSource.value,
        controller: controller.accdtlnvstgLadDataGridController,
        isSort: false,
        columnWidthMode: ColumnWidthMode.auto,
        freezeColumnCount: 5,
        stackedHeaderRows: [
          StackedHeaderRow(cells: [
            StackedHeaderCell(
                columnNames: [
                  'thingSerNo',
                  'lgdongNm',
                  'lcrtsDivCdNm',
                  'mlnoLtno',
                  'slnoLtno'
                ],
                child: Container(
                    alignment: Alignment.center,
                    child: AutoSizeText('ÌÜ†ÏßÄÎ≥¥ÏÉÅ ÎåÄÏÉÅ Í∏∞Ï§Ä Ï†ïÎ≥¥',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),
                        )))),
            StackedHeaderCell(
                columnNames: ['ofcbkLndcgrDivNm', 'sttusLndcgrDivNm'],
                child: Container(
                    alignment: Alignment.center,
                    child: AutoSizeText('ÏßÄÎ™©',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),
                        )))),
            StackedHeaderCell(
                columnNames: ['ofcbkAra', 'incrprAra', 'cmpnstnInvstgAra'],
                child: Container(
                    alignment: Alignment.center,
                    child: AutoSizeText('Î©¥Ï†Å(„é°)',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),
                        )))),
          ]),
        ],
        columns: [
          gridColumn('thingSerNo', 'Î¨ºÍ±¥ÏùºÎ†®Î≤àÌò∏', isVisble: false),
          gridColumn('lgdongNm', 'ÏÜåÏû¨ÏßÄ'),
          gridColumn('lcrtsDivCdNm', 'ÌäπÏßÄ', width: 40),
          gridColumn('mlnoLtno', 'Î≥∏Î≤à', width: 50),
          gridColumn('slnoLtno', 'Î∂ÄÎ≤à', width: 50),
          gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂Ä', width: 60),
          gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©', width: 60),
          gridColumn('ofcbkAra', 'Í≥µÎ∂Ä', width: 60),
          gridColumn('incrprAra', 'Ìé∏ÏûÖ', width: 60),
          gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨', width: 60),
          gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ', width: 80),
          gridColumn('aceptncUseDivNm', 'ÏàòÏö©/ÏÇ¨Ïö©', width: 60),
          gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 50),
          gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº', width: 90),
          gridColumn('cmpnstnStepDivNm', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ', width: 90),
          gridColumn('accdtInvstgRm', 'ÎπÑÍ≥†', width: 90),
        ],
        selectionEvent:
            ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
          if (addedRows.isEmpty) return;

          final index = controller.accdtlnvstgLadDataSource.value.rows
              .indexOf(addedRows.first);
          var getRow = controller.accdtlnvstgLadDataSource.value.rows[index];

          var data = AccdtlnvstgLadModel(
            thingSerNo: getRow.getCells()[0].value,
            lgdongNm: getRow.getCells()[1].value,
            lcrtsDivCdNm: getRow.getCells()[2].value,
            mlnoLtno: getRow.getCells()[3].value,
            slnoLtno: getRow.getCells()[4].value,
            ofcbkLndcgrDivNm: getRow.getCells()[5].value,
            sttusLndcgrDivNm: getRow.getCells()[6].value,
            ofcbkAra: num.parse(getRow.getCells()[7].value),
            incrprAra: num.parse(getRow.getCells()[8].value),
            cmpnstnInvstgAra: num.parse(getRow.getCells()[9].value),
            acqsPrpDivNm: getRow.getCells()[10].value,
            aceptncUseDivNm: getRow.getCells()[11].value,
            accdtInvstgSqnc: num.parse(getRow.getCells()[12].value),
            invstgDt: getRow.getCells()[13].value,
            cmpnstnStepDivNm: getRow.getCells()[14].value,
            accdtInvstgRm: getRow.getCells()[15].value,
          );

          controller.selectedOwnerLadOwnerData.value = data;
          controller.accdtlnvstgLadSearchDataSource.value =
              AccdtlnvstgLadDatasource(items: [data]);

          AppLog.i('buildLadAccdtlnvstgDataGrid > ÏÑ†ÌÉùÎêú ÌÜ†ÏßÄ Ï†ïÎ≥¥: ${data.toJson()}');

          controller.handleAccdtlnvstgLadTabSelected(1);

          if (controller.accdtlnvstgTabLadSelected[1] == true) {
            controller.fetchAccdtlnvstgLadOwnerDataSource(data.thingSerNo);
          }
        }));
  }

  // Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÌÜ†ÏßÄ Í≤ÄÏÉâ Í≤∞Í≥º
  Widget buildLadAccdtlnvstgSearchDataGrid() {
    return CustomGrid(
        dataSource: controller.accdtlnvstgLadSearchDataSource.value,
        controller: controller.accdtlnvstgLadDataSearchGridController,
        isSort: false,
        columnWidthMode: ColumnWidthMode.auto,
        freezeColumnCount: 5,
        stackedHeaderRows: [
          StackedHeaderRow(cells: [
            StackedHeaderCell(
                columnNames: [
                  'thingSerNo',
                  'lgdongNm',
                  'lcrtsDivCdNm',
                  'mlnoLtno',
                  'slnoLtno'
                ],
                child: Container(
                    alignment: Alignment.center,
                    child: AutoSizeText('ÌÜ†ÏßÄÎ≥¥ÏÉÅ ÎåÄÏÉÅ Í∏∞Ï§Ä Ï†ïÎ≥¥',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),
                        )))),
            StackedHeaderCell(
                columnNames: ['ofcbkLndcgrDivNm', 'sttusLndcgrDivNm'],
                child: Container(
                    alignment: Alignment.center,
                    child: AutoSizeText('ÏßÄÎ™©',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),
                        )))),
            StackedHeaderCell(
                columnNames: ['ofcbkAra', 'incrprAra', 'cmpnstnInvstgAra'],
                child: Container(
                    alignment: Alignment.center,
                    child: AutoSizeText('Î©¥Ï†Å(„é°)',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),
                        )))),
          ]),
        ],
        columns: [
          gridColumn('thingSerNo', 'Î¨ºÍ±¥ÏùºÎ†®Î≤àÌò∏', isVisble: false),
          gridColumn('lgdongNm', 'ÏÜåÏû¨ÏßÄ', width: 200),
          gridColumn('lcrtsDivCdNm', 'ÌäπÏßÄ', width: 40),
          gridColumn('mlnoLtno', 'Î≥∏Î≤à', width: 50),
          gridColumn('slnoLtno', 'Î∂ÄÎ≤à', width: 50),
          gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂Ä', width: 60),
          gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©', width: 60),
          gridColumn('ofcbkAra', 'Í≥µÎ∂Ä', width: 60),
          gridColumn('incrprAra', 'Ìé∏ÏûÖ', width: 60),
          gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨', width: 60),
          gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ', width: 80),
          gridColumn('aceptncUseDivNm', 'ÏàòÏö©/ÏÇ¨Ïö©', width: 60),
          gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 50),
          gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº', width: 90),
          gridColumn('cmpnstnStepDivNm', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ', width: 90),
          gridColumn('accdtInvstgRm', 'ÎπÑÍ≥†', width: 90),
        ]);
  }

  /// Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÏÜåÏú†Ïûê/Í¥ÄÍ≥ÑÏù∏ -> ÏÜåÏú†Ïûê ÌòÑÌô©
  Widget buildAccdtlnvstgLadOwnerStatusDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgLadOwnerDataSource.value,
      controller: controller.accdtlnvstgLadOwnerDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      freezeColumnCount: 3,
      columns: [
        gridColumn('ownerNo', 'ÏÜåÏú†ÏûêÎ≤àÌò∏'),
        gridColumn('ownerNm', 'ÏÑ±Î™Ö'),
        gridColumn('posesnDivNm', 'ÏÜåÏú†Íµ¨Î∂Ñ', width: 70),
        gridColumn('posesnShreDnmntrInfo', 'Î∂ÑÏûê', width: 70),
        gridColumn('posesnShreNmrtrInfo', 'Î∂ÑÎ™®', width: 70),
        gridColumn('ownerRrnEnc', 'Îì±Î°ùÎ≤àÌò∏', width: 130),
        gridColumn('ownerRgsbukAddr', 'Ï£ºÏÜå', width: 250),
        gridColumn('rgsbukZip', 'Ïö∞Ìé∏Î≤àÌò∏', width: 100),
        gridColumn('ownerTelno', 'Ï†ÑÌôîÎ≤àÌò∏', width: 130),
        gridColumn('ownerMbtlnum', 'Ìú¥ÎåÄÌè∞', width: 130),
      ],
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        if (addedRows.isEmpty) return;

        final index = controller.accdtlnvstgLadOwnerDataSource.value.rows
            .indexOf(addedRows.first);
        var getRow = controller.accdtlnvstgLadOwnerDataSource.value.rows[index];

        var ownerNo = getRow.getCells()[0].value;

        controller.fetchAccdtlnvstgLadPartcpntStatusDataSource(ownerNo);
      }),
    );
  }

  /// Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÏÜåÏú†Ïûê/Í¥ÄÍ≥ÑÏù∏ -> Í¥ÄÍ≥ÑÏù∏ ÌòÑÌô©
  Widget buildAccdtlnvstgLadPartcpntStatusDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgLadPartcpntDataSource.value,
      controller: controller.accdtlnvstgLadPartcpntDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('ownerNo', 'ÏÜåÏú†ÏûêÎ≤àÌò∏'),
        gridColumn('partcpntNm', 'Í¥ÄÍ≥ÑÍµ¨Î∂Ñ'),
        gridColumn('cmpnstnPartcpntRsn', 'ÏÑ±Î™Ö'),
        gridColumn('partcpntAddr', 'Ï£ºÏÜå'),
        gridColumn('partcpntZip', 'Ïö∞Ìé∏Î≤àÌò∏'),
        gridColumn('partcpntTelno', 'Ï†ÑÌôîÎ≤àÌò∏'),
        gridColumn('partcpntMbtlnum', 'Ï†ÑÌôîÎ≤àÌò∏'),
      ],
    );
  }

  /// [buildAccdtlnvstgObstDataGrid] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú
  /// [Ïã§ÌÉúÏ°∞ÏÇ¨ > ÏßÄÏû•Î¨ºÌòÑÌô©]
  Widget buildAccdtlnvstgObstDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgObstDataSource.value,
      controller: controller.accdtlnvstgObstDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        if (addedRows.isEmpty) return;

        final index = controller.accdtlnvstgObstDataSource.value.rows
            .indexOf(addedRows.first);
        var getRow = controller.accdtlnvstgObstDataSource.value.rows[index];

        var thingSerNo = getRow.getCells()[0].value;
        AppLog.d('ÏÑ†ÌÉùÎêú ÏßÄÏû•Î¨º Î≤àÌò∏: $thingSerNo');

        controller.fetchAccdtlnvstgObstOwnerDataSource(thingSerNo);
      }),
      columns: [
        gridColumn('thingSerNo', 'Î¨ºÍ±¥ÏùºÎ†®Î≤àÌò∏', isVisble: false),
        gridColumn('cmpnstnObstNo', 'ÏßÄÏû•Î¨º\nÏàúÎ≤à', width: 80.w),
        gridColumn('obstDivNm', 'ÏßÄÏû•Î¨º\nÍµ¨Î∂Ñ', width: 200.w),
        gridColumn('cmpnstnThingKndDtls', 'Î¨ºÍ±¥ÏùòÏ¢ÖÎ•ò'),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞ Î∞è Í∑úÍ≤©', width: 400.w),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâ(Î©¥Ï†Å)', width: 150.w),
        gridColumn('cmpnstnThingUnitDivNm', 'Îã®ÏúÑ', width: 100.w),
        gridColumn('lgdongNm', 'Ï£ºÏÜå'),
        gridColumn('acddtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 90.w),
        gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº'),
        gridColumn('spcitm', 'ÎπÑÍ≥†'),
      ],
    );
  }

  Widget buildAccdtlnvstgObstOwnerStatusDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgObstOwnerDataSource.value,
      controller: controller.accdtlnvstgObstOwnerDataGridController,
      isSort: false,
      selectionEvent:
          ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        if (addedRows.isEmpty) return;

        final index = controller.accdtlnvstgObstOwnerDataSource.value.rows
            .indexOf(addedRows.first);
        var getRow =
            controller.accdtlnvstgObstOwnerDataSource.value.rows[index];

        var thingSerNo = getRow.getCells()[0].value;
        AppLog.d('ÏÑ†ÌÉùÎêú ÏßÄÏû•Î¨º Î≤àÌò∏: $thingSerNo');

        controller.fetchAccdtlnvstgObstOwnerDataSource(thingSerNo);
      }),
      columns: [
        gridColumn('thingSerNo', 'Î¨ºÍ±¥ÏùºÎ†®Î≤àÌò∏'),
        gridColumn('ownerNo', 'ÏÜåÏú†ÏûêÎ≤àÌò∏'),
        gridColumn('ownerNm', 'ÏÑ±Î™Ö'),
        gridColumn('posesnDivNm', 'ÏÜåÏú†Íµ¨Î∂Ñ'),
        gridColumn('posesnShreDnmntrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÏûê'),
        gridColumn('posesnShreNmrtrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÎ™®'),
        gridColumn('ownerRrnEnc', 'Îì±Î°ùÎ≤àÌò∏'),
        gridColumn('ownerRgsbukAddr', 'Ï£ºÏÜå'),
        gridColumn('rgsbukZip', 'Ïö∞Ìé∏Î≤àÌò∏'),
        gridColumn('ownerTelno', 'Ï†ÑÌôîÎ≤àÌò∏'),
        gridColumn('ownerMbtlnum', 'Ìú¥ÎåÄÌè∞'),
      ],
    );
  }

  /// [buildAccdtlnvstgObstDataGrid] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú
  /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥ > ÌÜ†ÏßÄÌòÑÌô©Ï°∞Ìöå]
  Widget buildLadSttusInqireDataGrid(List<GridColumn> columns) {
    return CustomGrid(
      dataSource: controller.ladSttusInqireDataSource.value,
      controller: controller.ladSttusInqireDataGridController,
      columnWidthMode: ColumnWidthMode.auto,
      horizontalScrollController: controller.ladSttusInqireScrollController,
      freezeColumnCount: 4,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['lgdongNm', 'lcrtsDivNm', 'mlnoLtno', 'slnoLtno'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÌÜ†ÏßÄÍ∏∞Î≥∏Ï†ïÎ≥¥',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: ['ofcbkLndcgrDivNm', 'sttusLndcgrDivNm'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÎ™©',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: ['ofcbkAra', 'incrprAra'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î©¥Ï†Å(„é°)',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: ['aceptncUseDivCd', 'invstgDt', 'accdtInvstgSqnc'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ïã§ÌÉúÏ°∞ÏÇ¨',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'ownerNo',
                'posesnDivNm',
                'ownerNm',
                'ownerRgsbukAddr',
                'posesnShreNmrtrInfo',
                'posesnShreDnmntrInfo'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏÜåÏú†ÏûêÏ†ïÎ≥¥',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: ['apasmtDivCd', 'apasmtSqnc', 'prcPnttmDe'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Í∞êÏ†ïÌèâÍ∞Ä',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'apasmtInsttNm1',
                'apasmtInsttEvlUpc1',
                'apasmtInsttEvlAmt1'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('AÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'apasmtInsttNm2',
                'apasmtInsttEvlUpc2',
                'apasmtInsttEvlAmt2'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('BÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'apasmtInsttNm3',
                'apasmtInsttEvlUpc3',
                'apasmtInsttEvlAmt3'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('CÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: ['cmpnstnCmptnUpc', 'cpsmnCmptnAmt'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î≥¥ÏÉÅÎπÑÏÇ∞Ï†ï',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'caPymntRequstDe',
                'cmpnstnDscssUpc',
                'cmpnstnDscssTotAmt',
                'caRgistDt'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î≥¥ÏÉÅÎπÑÏßÄÍ∏â',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'aceptncAdjdcUpc',
                'aceptncAdjdcAmt',
                'aceptncAdjdcDt',
                'aceptncUseBeginDe',
                'ldPymntRequstDe',
                'ldRgistDt',
                'ldCpsmnPymntLdgmntDivCd'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏàòÏö©Ïû¨Í≤∞',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'obadUpc',
                'objcRstAmt',
                'objcAdjdcDt',
                'proPymntRequstDe',
                'proCpsmnPymntLdgmntDivCd'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ïù¥ÏùòÏû¨Í≤∞',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
        ]),
      ],
      columns: columns,
    );
  }

  /// [buildAccdtlnvstgObstDataGrid] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú
  /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥ > ÏßÄÏû•Î¨ºÌòÑÌô©Ï°∞Ìöå]
  Widget buildObstSttusInqireDataGrid(List<GridColumn> columns) {
    return CustomGrid(
      dataSource: controller.obstSttusInqireDataSource.value,
      controller: controller.obstSttusInqireDataGridController,
      columnWidthMode: ColumnWidthMode.auto,
      isSort: true,
      freezeColumnCount: 4,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['lgdongNm', 'lcrtsDivCd', 'mlnoLtno', 'slnoLtno'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÏû•Î¨ºÍ∏∞Î≥∏Ï†ïÎ≥¥',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: ['rqest', 'invstgDe', 'accdtInvstgSqnc'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ïã§ÌÉúÏ°∞ÏÇ¨',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
          StackedHeaderCell(
              columnNames: [
                'ownerNo',
                'posesnDivCd',
                'ownerNm',
                'ownerRgsbukAddr',
                'posesnShreNmrtrInfo',
                'posesnShreDnmntrInfo'
              ],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏÜåÏú†ÏûêÏ†ïÎ≥¥',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),
                      )))),
        ]),
      ],
      columns: columns,
    );
  }

  Widget buildCstmrcardLadParcpntDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardLadPartcpntDataSource.value,
      controller: controller.cstmrCardLadPartcpntDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÌÜ†ÏßÄÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂ÄÏßÄÎ™©'),
        gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©ÏßÄÎ™©'),
        gridColumn('ofcbkAra', 'Í≥µÎ∂ÄÎ©¥Ï†Å'),
        gridColumn('incrprAra', 'Ìé∏ÏûÖÎ©¥Ï†Å'),
        gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨Î©¥Ï†Å'),
        gridColumn('posesnShreNmrtrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÏûê'),
        gridColumn('posesnShreDnmntrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÎ™®'),
        gridColumn('partcpntSeq', 'Í¥ÄÍ≥ÑÏù∏ÏàúÎ≤à'),
        gridColumn('cmpnstnPartcpntRsn', 'Í¥ÄÍ≥ÑÏù∏Íµ¨Î∂Ñ'),
        gridColumn('partcpntNm', 'Í¥ÄÍ≥ÑÏù∏Î™Ö'),
        gridColumn('partcpntAddr', 'Í¥ÄÍ≥ÑÏù∏Ï£ºÏÜå'),
        gridColumn('partcpntMbtlnum', 'Í¥ÄÍ≥ÑÏù∏Ïó∞ÎùΩÏ≤ò'),
      ],
    );
  }

  Widget buildCstmrcardObstParcpntDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardObstPartcpntDatasource.value,
      controller: controller.cstmrCardObstPartcpntDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÏßÄÏû•Î¨ºÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞Î∞èÍ∑úÍ≤©'),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâÎ∞èÎ©¥Ï†Å'),
        gridColumn('cmpnstnThingUnitDivNm', 'Îã®ÏúÑ'),
        gridColumn('partcpntSeq', 'Í¥ÄÍ≥ÑÏù∏ÏàúÎ≤à'),
        gridColumn('cmpnstnPartcpntRsn', 'Í¥ÄÍ≥ÑÏù∏Íµ¨Î∂Ñ'),
        gridColumn('partcpntNm', 'Í¥ÄÍ≥ÑÏù∏Î™Ö'),
        gridColumn('partcpntAddr', 'Í¥ÄÍ≥ÑÏù∏Ï£ºÏÜå'),
        gridColumn('partcpntMbtlnum', 'Í¥ÄÍ≥ÑÏù∏Ïó∞ÎùΩÏ≤ò'),
      ],
    );
  }

  Widget buildCstmrcardCmpnstnDataGrid() {
    return CustomGrid(
        dataSource: controller.cstrmcardCmpnstnDatSource.value,
        controller: controller.cstmrCardCmpnstnDataGridController,
        isSort: false,
        columnWidthMode: ColumnWidthMode.auto,
        columns: [
          gridColumn('sbmtDe', 'ÏöîÏ≤≠ÏùºÏûê'),
          gridColumn('sanctnTit', 'ÏöîÏ≤≠ÎÇ¥Ïó≠'),
          gridColumn('cmpnstnDscssSqnc', 'ÌòëÏùòÏ∞®Ïàò'),
          gridColumn('dscssMthDc', 'ÌòëÏùòÎ∞©Î≤ï'),
          gridColumn('cmpnstnDscssPdInfo', 'ÌòëÏùòÍ∏∞Í∞Ñ'),
          gridColumn('cmpnstnDscssPlaceDtls', 'ÌòëÏùòÏû•ÏÜå'),
          gridColumn('cmpnstnEraMthPrcdrCtnt', 'ÏãúÍ∞ÑÎ∞©Î≤ï Î∞è Ï†àÏ∞®'),
        ]);
  }

  Widget buildCstmrcardLadAceptncDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardLadAceptncDatasource.value,
      controller: controller.cstmrCardLadAceptncDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÌÜ†ÏßÄÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂ÄÏßÄÎ™©'),
        gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©ÏßÄÎ™©'),
        gridColumn('ofcbkAra', 'Í≥µÎ∂ÄÎ©¥Ï†Å'),
        gridColumn('incrprAra', 'Ìé∏ÏûÖÎ©¥Ï†Å'),
        gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨Î©¥Ï†Å'),
        gridColumn('posesnShreNmrtrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÏûê'),
        gridColumn('posesnShreDnmntrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÎ™®'),
        gridColumn('aceptncUseBeginDe', 'ÏàòÏö©/ÏÇ¨Ïö©Í∞úÏã§Ïùº'),
        gridColumn('aceptncAdjdcDt', 'Ïû¨Í≤∞ÏùºÏûê'),
        gridColumn('aceptncAdjdcUpc', 'Ïû¨Í≤∞Îã®Í∞Ä'),
        gridColumn('aceptncAdjdcAmt', 'Ïû¨Í≤∞Í∏àÏï°'),
      ],
    );
  }

  Widget buildCstmrcardObstAceptncDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardObstAceptncDatasource.value,
      controller: controller.cstmrCardObstAceptncDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÏßÄÏû•Î¨ºÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('cmpnstnThingKndDtls', 'Î¨ºÍ±¥Ï¢ÖÎ•ò'),
        gridColumn('obstDivNm', 'Î¨ºÍ±¥Íµ¨Î∂Ñ'),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞Î∞èÍ∑úÍ≤©'),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâÎ∞èÎ©¥Ï†Å'),
        gridColumn('cmpnstnThingUnitDivNm', 'Îã®ÏúÑ'),
        gridColumn('aceptncUseBeginDe', 'ÏàòÏö©/ÏÇ¨Ïö©Í∞úÏã§Ïùº'),
        gridColumn('aceptncAdjdcDt', 'Ïû¨Í≤∞ÏùºÏûê'),
        gridColumn('aceptncAdjdcUpc', 'Ïû¨Í≤∞Îã®Í∞Ä'),
        gridColumn('aceptncAdjdcAmt', 'Ïû¨Í≤∞Í∏àÏï°'),
      ],
    );
  }

  Widget buildCstmrcardLadObjcDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardLadObjcDatasource.value,
      controller: controller.cstmrCardLadObjcDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÌÜ†ÏßÄÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂ÄÏßÄÎ™©'),
        gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©ÏßÄÎ™©'),
        gridColumn('ofcbkAra', 'Í≥µÎ∂ÄÎ©¥Ï†Å'),
        gridColumn('incrprAra', 'Ìé∏ÏûÖÎ©¥Ï†Å'),
        gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨Î©¥Ï†Å'),
        gridColumn('posesnShreNmrtrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÏûê'),
        gridColumn('posesnShreDnmntrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÎ™®'),
        gridColumn('objcLdgmntDe', 'Í≥µÌÉÅÏùºÏûê'),
        gridColumn('objcLdgmntAmt', 'Í≥µÌÉÅÍ∏àÏï°'),
        gridColumn('obadUpc', 'Ïû¨Í≤∞Îã®Í∞Ä'),
        gridColumn('objcRstAmt', 'Ïû¨Í≤∞Í∏àÏï°'),
        gridColumn('objcIrsdAmt', 'Ï¶ùÏï°Í∏àÏï°'),
        gridColumn('objcAdjdcDt', 'Ïû¨Í≤∞ÏùºÏûê'),
        gridColumn('objcLdgmntPrrgDe', 'Í≥µÌÉÅÏòàÏ†ïÏùº'),
      ],
    );
  }

  Widget buildCstmrcardObstObjcDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardObstObjcDatasource.value,
      controller: controller.cstmrCardObstObjcDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÏßÄÏû•Î¨ºÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('cmpnstnThingKndDtls', 'Î¨ºÍ±¥Ï¢ÖÎ•ò'),
        gridColumn('obstDivNm', 'Î¨ºÍ±¥Íµ¨Î∂Ñ'),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞Î∞èÍ∑úÍ≤©'),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâÎ∞èÎ©¥Ï†Å'),
        gridColumn('cmpnstnThingUnitDivNm', 'Îã®ÏúÑ'),
        gridColumn('objcLdgmntDe', 'Í≥µÌÉÅÏùºÏûê'),
        gridColumn('objcLdgmntAmt', 'Í≥µÌÉÅÍ∏àÏï°'),
        gridColumn('obadUpc', 'Ïû¨Í≤∞Îã®Í∞Ä'),
        gridColumn('objcRstAmt', 'Ïû¨Í≤∞Í∏àÏï°'),
        gridColumn('objcIrsdAmt', 'Ï¶ùÏï°Í∏àÏï°'),
        gridColumn('objcAdjdcDt', 'Ïû¨Í≤∞ÏùºÏûê'),
        gridColumn('objcLdgmntPrrgDe', 'Í≥µÌÉÅÏòàÏ†ïÏùº'),
      ],
    );
  }

  Widget buildCstmrcardLadLwstDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardLadLwstDatasource.value,
      controller: controller.cstmrCardLadLwstDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÌÜ†ÏßÄÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂ÄÏßÄÎ™©'),
        gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©ÏßÄÎ™©'),
        gridColumn('ofcbkAra', 'Í≥µÎ∂ÄÎ©¥Ï†Å'),
        gridColumn('incrprAra', 'Ìé∏ÏûÖÎ©¥Ï†Å'),
        gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨Î©¥Ï†Å'),
        gridColumn('posesnShreNmrtrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÏûê'),
        gridColumn('posesnShreDnmntrInfo', 'ÏßÄÎ∂ÑÎ∂ÑÎ™®'),
        gridColumn('lwstApelStepDivNm', 'ÏÉÅÏÜåÎã®Í≥Ñ'),
        gridColumn('trl01LwstSlipNo', 'Ï†ÑÌëúÎ≤àÌò∏'),
        gridColumn('judmnPymntDe', 'ÏßÄÍ∏âÏùºÏûê'),
        gridColumn('trl01LwstPymamt', 'ÏßÄÍ∏âÍ∏âÏï°'),
      ],
    );
  }

  Widget buildCstmrcardObstLwstDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardObstLwstDatasource.value,
      controller: controller.cstmrCardObstLwstDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      columns: [
        gridColumn('lgdongNm', 'ÏßÄÏû•Î¨ºÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('cmpnstnThingKndDtls', 'Î¨ºÍ±¥Ï¢ÖÎ•ò'),
        gridColumn('obstDivNm', 'Î¨ºÍ±¥Íµ¨Î∂Ñ'),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞Î∞èÍ∑úÍ≤©'),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâÎ∞èÎ©¥Ï†Å'),
        gridColumn('cmpnstnThingUnitDivNm', 'Îã®ÏúÑ'),
        gridColumn('lwstApelStepDivNm', 'ÏÉÅÏÜåÎã®Í≥Ñ'),
        gridColumn('trl01LwstSlipNo', 'Ï†ÑÌëúÎ≤àÌò∏'),
        gridColumn('judmnPymntDe', 'ÏßÄÍ∏âÏùºÏûê'),
        gridColumn('trl01LwstPymamt', 'ÏßÄÍ∏âÍ∏âÏï°'),
      ],
    );
  }

  Widget buildCstmrcardReprchstDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardReprchsDatasource.value,
      controller: controller.cstmrCardReprchsDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.auto,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['ofcbkLndcgrDivNm', 'sttusLndcgrDivNm'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÎ™©',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['ofcbkAra', 'incrprAra'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î©¥Ï†Å(„é°)',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['posesnShreNmrtrInfo', 'posesnShreDnmntrInfo'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÎ∂Ñ',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttEvlUpc1', 'apasmtInsttEvlAmt1'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('AÌèâÍ∞Ä Í∏∞Í¥Ä',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttEvlUpc2', 'apasmtInsttEvlAmt2'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('BÌèâÍ∞Ä Í∏∞Í¥Ä',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['reprchsCmptnUpc', 'reprchsCmptnAmt'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏÇ∞Ï†ïÏï°',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['reprchsRctcDivCd', 'rctcAmt', 'rctcDe'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏàòÎÇ©ÎÇ¥Ïó≠',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
        ]),
      ],
      columns: [
        gridColumn('lgdongNm', 'ÌÜ†ÏßÄÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivNm', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂Ä'),
        gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©'),
        gridColumn('ofcbkAra', 'Í≥µÎ∂ÄÎ©¥Ï†Å'),
        gridColumn('incrprAra', 'Ìé∏ÏûÖÎ©¥Ï†Å'),
        gridColumn('posesnShreNmrtrInfo', 'Î∂ÑÏûê'),
        gridColumn('posesnShreDnmntrInfo', 'Î∂ÑÎ™®'),
        gridColumn('cpsmn', 'Î≥¥ÏÉÅÍ∏àÏï°'),
        gridColumn('ownerNm', 'ÏÜåÏú†ÏûêÎ™Ö'),
        gridColumn('reprchsNotieRecptDe', 'ÌôòÎß§ÌÜµÏßÄÏùº'),
        gridColumn('reprchsOpinionAnswerDe', 'ÏùòÏÇ¨ÌëúÏãúÏùº'),
        gridColumn('apasmtReqestDt', 'Í∞êÏ†ïÌèâÍ∞ÄÏùòÎ¢∞Ïùº'),
        gridColumn('apasmtSqnc', 'ÌèâÍ∞ÄÏ∞®Ïàò'),
        gridColumn('prcPnttmDe', 'Í∞ÄÍ≤©ÏãúÏ†ê'),
        gridColumn('apasmtInsttEvlUpc1', 'Îã®Í∞Ä'),
        gridColumn('apasmtInsttEvlAmt1', 'Í∏àÏï°'),
        gridColumn('apasmtInsttEvlUpc2', 'Îã®Í∞Ä'),
        gridColumn('apasmtInsttEvlAmt2', 'Í∏àÏï°'),
        gridColumn('reprchsCmptnUpc', 'Îã®Í∞Ä'),
        gridColumn('reprchsCmptnAmt', 'Í∏àÏï°'),
        gridColumn('sanctnDe', 'ÏÇ∞Ï†ïÍ≤∞Ïû¨Ïùº\n(Í∏∞ÏïàÏùº)'),
        gridColumn('reprchsRctcDivCd', 'ÏàòÎÇ©Íµ¨Î∂Ñ'),
        gridColumn('rctcAmt', 'Í∏àÏï°'),
        gridColumn('rctcDe', 'ÏùºÏûê'),
      ],
    );
  }

  Widget buildCstmrcardConfirmDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardConfirmDatasource.value,
      controller: controller.cstmrCardConfirmDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.fill,
      columns: [
        gridColumn('issNo', 'Î∞úÍ∏âÏ∞®Ïàò'),
        gridColumn('isuDt', 'Î∞úÍ∏âÏùº'),
        gridColumn('bondIsuDe', 'Ï±ÑÍ∂åÏàòÎ†πÏùº'),
        gridColumn('prchasCnfrmnIsuDivNm', 'Î∞úÍ∏âÏö©ÎèÑ'),
        gridColumn('pymntSumAmt', 'Ï¥ùÎ≥¥ÏÉÅÍ∏à'),
        gridColumn('prchasCnfrmnIssAmt', '(Í∏∞)Î∞úÍ∏âÍ∏àÏï°'),
        gridColumn('delamt', 'ÏÜåÎ©∏Ïï°'),
        gridColumn('janamt', 'Î∞úÍ∏âÍ∞ÄÎä•Í∏àÏï°'),
      ],
    );
  }

  Widget buildCstmrcardFobjctDataGrid() {
    return CustomGrid(
      dataSource: controller.cstmrcardFobjctDatasource.value,
      controller: controller.cstmrCardFobjctDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.fill,
      columns: [
        gridColumn('rqstDe', 'Ïã†Ï≤≠ÏùºÏûê'),
        gridColumn('fobjctPrgstsDivNm', 'ÏßÑÌñâÏÉÅÌÉú'),
        gridColumn('applcntNm', 'Ïã†Ï≤≠Ïù∏'),
        gridColumn('applcntTelno', 'Ïã†Ï≤≠Ïù∏Ïó∞ÎùΩÏ≤ò'),
        gridColumn('fobjctApplcntRelInfo', 'ÏÜåÏú†ÏûêÏôÄÏùòÍ¥ÄÍ≥Ñ'),
        gridColumn('objcRqstDtls', 'Ïù¥ÏùòÏã†Ï≤≠ÎÇ¥Ïö©'),
        gridColumn('actnDtls', 'Ï°∞ÏπòÎÇ¥Ïö©'),
        gridColumn('actnDt', 'Ï°∞ÏπòÏùºÏûê'),
      ],
    );
  }

  /// [buildBsnsRadio] ÎùºÎîîÏò§ Î≤ÑÌäº
  Widget buildBsnsRadio() {
    return Container(
      //color: Colors.green,
      width: double.infinity,
      child: FittedBox(
        fit: BoxFit.scaleDown,
        alignment: Alignment.topLeft,
        child: Row(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            SizedBox(
                width: 120.w,
                child: AutoSizeText('ÏÇ¨ÏóÖÍµ¨Î∂Ñ',
                    maxFontSize: 20,
                    style: TextStyle(
                        color: tableTextColor,
                        fontSize: 32.sp,
                        fontWeight: FontWeight.w500))),
            SizedBox(width: 20.w),
            CustomRadio(
              value: 0,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 0);
              },
              label: 'Îåê',
            ),
            CustomRadio(
              value: 1,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 1);
              },
              label: 'ÏàòÎèÑÏö©ÏßÄ',
            ),
            CustomRadio(
              value: 2,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 2);
              },
              label: 'ÌÉùÏßÄÍ∞úÎ∞ú',
            ),
            CustomRadio(
              value: 3,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 3);
              },
              label: 'Í∏∞ÌÉÄ',
            ),
          ],
        ),
      ),
    );
  }

  /// [buildOwnerMngRadio] ÎùºÎîîÏò§ Î≤ÑÌäº
  Widget buildOwnerMngRadio() {
    return Container(
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            width: 40.w,
            height: 40.h,
            child: Radio(
              value: 0,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 0);
              },
            ),
          ),
          SizedBox(width: 16.w),
          AutoSizeText('ÏÜåÏú†Ïûê',
              style: TextStyle(
                  fontSize: 30.sp,
                  fontWeight: FontWeight.w400,
                  color: tableTextColor)),
          SizedBox(width: 40.w),
          Container(
            width: 40.w,
            height: 40.h,
            child: Radio(
              value: 1,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 1);
              },
            ),
          ),
          SizedBox(width: 16.w),
          AutoSizeText('Í¥ÄÍ≥ÑÏù∏',
              style: TextStyle(
                  fontSize: 30.sp,
                  fontWeight: FontWeight.w400,
                  color: tableTextColor)),
        ],
      ),
    );
  }
}
