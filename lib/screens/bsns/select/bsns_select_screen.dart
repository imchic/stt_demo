
import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_naver_map/flutter_naver_map.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/svg.dart';
import 'package:get/get.dart';

import 'package:syncfusion_flutter_datagrid/datagrid.dart';

import '../../../components/base_header.dart';
import '../../../components/custom_grid.dart';
import '../../../components/custom_radio.dart';
import '../../../components/custom_textfield.dart';
import '../../../utils/colors.dart';
import '../../../utils/dialog_util.dart';
import '../../../widget/accdt_invstg_widget.dart';
import '../../../widget/bsns_widget.dart';
import '../../../widget/customercard_widget.dart';
import '../../../widget/owner_widget.dart';
import '../../../widget/sttus_widget.dart';
import '../../owner/lad/model/owner_lad_info_datasource_model.dart';
import '../bsns_controller.dart';
import 'bsns_plan_select_area_model.dart';

/// [BsnsSelectScreen] ÏÇ¨ÏóÖÏÑ†ÌÉù ÌôîÎ©¥
class BsnsSelectScreen extends GetView<BsnsController> {

  const BsnsSelectScreen({super.key});

  @override
  Widget build(BuildContext context) {
    Get.put(BsnsController());

    return Scaffold(
      resizeToAvoidBottomInset: true,
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: Row(
                children: [
                  // ÏôºÏ™Ω Î©îÎâ¥ Î≤ÑÌäº
                  Container(child: lnbWidget()),
                  // Î©îÏù∏ Î∑∞
                  Expanded(
                    child: Obx(() => PageView(
                            physics: NeverScrollableScrollPhysics(),
                            controller: controller.pageController,
                            onPageChanged: (index) {
                              controller.selectedIndex.value = index;
                              controller.isBsnsZoneSelectFlag.value = false;
                              controller.isBsnsSqncSelectFlag.value = false;
                              controller.isBsnsSelectFlag.value = false;

                              // ÏÇ¨ÏóÖÍµ¨Ïó≠ ÏÑ†ÌÉùÏù¥ ÏïàÎêêÏùÑ Í≤ΩÏö∞
                              if(controller.selectedBsnsSelectArea.value.bsnsNo == null && controller.selectedBsnsSelectArea.value.bsnsZoneNo == null){
                                DialogUtil.showSnackBar(context, 'ÏÇ¨ÏóÖÍµ¨Ïó≠', 'ÏÇ¨ÏóÖÍµ¨Ïó≠ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
                                controller.pageController.jumpToPage(0);
                                return;
                              }

                              if(index == 1){
                                /// [ÏÜåÏú†Ïûê Î∞è Í¥ÄÎ¶¨Ïù∏] Ï°∞Ìöå
                                controller.fetchBsnsOwnerDataSource();
                              }

                              if(index == 3){
                                /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥] Ï°∞Ìöå
                                controller.fetchLadSttusInqireDataSource();
                                controller.fetchObstSttusInqireDataSource();
                              }

                            },
                            children: [
                              /// [ÏÇ¨ÏóÖÏÑ†ÌÉù] ÌôîÎ©¥
                              Column(
                                children: [
                                  BaseHeader(),
                                  Expanded(child: Row(
                                    children: [
                                      Expanded(
                                          flex: 1,
                                          child: BsnsWidget.buildBsnsListView(controller)
                                      ),
                                      // Ïò§Î•∏Ï™Ω Î∑∞
                                      Obx(() {
                                        return Expanded(
                                          flex: controller.isBsnsSelectFlag == true ? 1 : 0,
                                          child: Column(
                                            children: [
                                              if (controller.selectedIndex.value == 0)

                                              // ÏÇ¨ÏóÖÍµ¨Ïó≠
                                                controller.isBsnsSelectFlag == true
                                                    ? BsnsWidget.buildBsnsSelectZoneContainer(controller)
                                                    : Container(),

                                              // Ï°∞ÏÇ¨Ï∞®Ïàò
                                              controller.isBsnsZoneSelectFlag == true
                                                  ? BsnsWidget.buildBsnsSelectSqncContainer(controller)
                                                  : Container(),

                                            ],
                                          ),
                                        );
                                      }),
                                    ],
                                  )),
                                ],
                              ),
                              /// [ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨] ÌôîÎ©¥
                              Column(
                                children: [
                                  BaseHeader(),
                                  Expanded(child: OwnerWidget.buildOwnerView(controller)),
                                ],
                              ),
                              /// [Ïã§ÌÉúÏ°∞ÏÇ¨] ÌôîÎ©¥
                              Column(
                                children: [
                                  BaseHeader(),
                                  Expanded(child: AccdtInvstgWidget.buildAccdtInvstgView(controller)),
                                ],
                              ),
                              /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥] ÌôîÎ©¥
                              //Center(child: AutoSizeText('ÌÜµÍ≥ÑÏ†ïÎ≥¥ Í∞úÎ∞ú Ï§ÄÎπÑÏ§ëÏûÖÎãàÎã§ üòÉ')),
                              Column(
                                children: [
                                  BaseHeader(),
                                  Expanded(child: SttusWidget.buildSttusView(controller)),
                                ],
                              ),
                              /// [Í≥†Í∞ùÏπ¥Îìú] ÌôîÎ©¥
                              Center(child: AutoSizeText('Í≥†Í∞ùÏπ¥Îìú Í∞úÎ∞ú Ï§ÄÎπÑÏ§ëÏûÖÎãàÎã§ üòÉ')),
                              // Column(
                              //   children: [
                              //     BaseHeader(),
                              //     Expanded(child: CustomerCardWidget.buildCustomerCard(controller))
                              //   ],
                              // ),
                            ],
                          ),
                        ),
                  ),

                  // // Ïò§Î•∏Ï™Ω Î∑∞
                  // Obx(() {
                  //   return Expanded(
                  //     flex: controller.isBsnsSelectFlag == true ? 4 : 0,
                  //     child: Column(
                  //       children: [
                  //         if (controller.selectedIndex.value == 0)
                  //
                  //           // ÏÇ¨ÏóÖÍµ¨Ïó≠
                  //           controller.isBsnsSelectFlag == true
                  //               ? BsnsWidget.buildBsnsSelectZoneContainer(controller)
                  //               : Container(),
                  //
                  //           // Ï°∞ÏÇ¨Ï∞®Ïàò
                  //           controller.isBsnsZoneSelectFlag == true
                  //               ? BsnsWidget.buildBsnsSelectSqncContainer(controller)
                  //               : Container(),
                  //
                  //       ],
                  //     ),
                  //   );
                  // }),

                  /// Ïä¨ÎùºÏù¥Îìú Ìå®ÎÑê
                  Builder(
                    builder: (context) => InkWell(
                      onTap: () {
                        Scaffold.of(context).openEndDrawer();
                      },
                      child: Center(
                        child: SvgPicture.asset(
                          'assets/icons/ic_gis_open.svg',
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            // right drawer
          ],
        ),
      ),
      endDrawer: Drawer(
        width: Get.width * 0.95,
        child: NaverMap(
          options: NaverMapViewOptions(
            initialCameraPosition: NCameraPosition(
              target: NLatLng(37.3595704, 127.105399),
              zoom: 15,
            ),
            mapType: NMapType.hybrid,
          ),
          onMapReady: (controller) {
            debugPrint("ÎÑ§Ïù¥Î≤Ñ Îßµ Î°úÎî©Îê®!");
          },
        ),
      ),
    );
  }

  /// [lnbWidget] ÏôºÏ™Ω Î©îÎâ¥ Î≤ÑÌäº
  Widget lnbWidget() {
    return Obx(
      () => Container(
        width: 1.w > 1.h ? 210.w : 308.w,
        decoration: BoxDecoration(
          color: lnbBg,
        ),
        child: Column(
          children: [
            Container(
              //width: 208.w,
              width: 1.w > 1.h ? 208.w : 308.w,
              height: 160.h,
              clipBehavior: Clip.antiAlias,
              decoration: BoxDecoration(
                color: Color(0xFF667185),
                // color: Colors.red,
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Container(
                    //color: Colors.green,
                    child: SvgPicture.asset(
                      'assets/icons/ic_kwater_logo.svg',
                      width: 136.w,
                      height: 64.h,
                      fit: BoxFit.contain,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: controller.leftNavItems.length,
                itemBuilder: (context, index) {
                  return Obx(() {
                    return InkWell(
                      onTap: () {
                        //controller.selectedIndex.value = index;
                        controller.pageController.jumpToPage(index);
                      },
                      child: Container(
                        width: 1.w > 1.h ? 208.w : 308.w,
                        height: 160.h,
                        padding: EdgeInsets.symmetric(horizontal: 40.w),
                        decoration: BoxDecoration(
                          color: controller.selectedIndex.value == index
                              ? Color(0xFF2287EF)
                              : Colors.transparent,
                        ),
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            Container(
                              width: 1.w > 1.h ? 40.w : 60.w,
                              height: 1.w > 1.h ? 40.h : 60.h,
                              child: SvgPicture.asset(
                                  'assets/icons/ic_menu_${index + 1}.svg',
                                  width: 1.w > 1.h ? 40.w : 60.w,
                                  height: 1.w > 1.h ? 40.h : 60.h,
                                  color: Colors.white),
                            ),
                            SizedBox(height: 8.h),
                            AutoSizeText(controller.leftNavItems[index],
                                style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 1.w > 1.h ? 30.sp : 42.sp,
                                    fontWeight: FontWeight.w500),
                                //overflow: TextOverflow.ellipsis,
                                textAlign: TextAlign.center),
                          ],
                        ),
                      )
                    );
                  });
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// [buildTable] ÌÖåÏù¥Î∏î
  Widget buildTable() {
    return Container(
      width: double.infinity,
      child: Table(
        columnWidths: const {
          0: FlexColumnWidth(0.35),
          1: FlexColumnWidth(2),
        },
        //defaultColumnWidth: const FlexColumnWidth(1),
        border: TableBorder.all(color: gray300),
        children: [
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                        'Í¥ÄÎ†®Í≥†ÏãúÎ≤àÌò∏',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Color(0xFF1D1D1D),
                          fontSize: 1.w > 1.h ? 30.sp : 50.sp,
                          fontWeight: FontWeight.w700,
                          overflow: TextOverflow.ellipsis,
                        ),
                        maxLines: 2,
                      )),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.gztNtfcNoDtls ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 1.w > 1.h ? 32.sp : 52.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                        'ÏãúÌñâÎ∞©Î≤ï',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Color(0xFF1D1D1D),
                          fontSize: 1.w > 1.h ? 30.sp : 50.sp,
                          fontWeight: FontWeight.w700,
                        ),
                      )),
                ),
              ),
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.enfcMthDtls ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 1.w > 1.h ? 32.sp : 52.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                    child: AutoSizeText(
                      'ÏÇ¨ÏóÖÎ™©Ï†Å',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        color: Color(0xFF1D1D1D),
                        fontSize: 1.w > 1.h ? 30.sp : 50.sp,
                        fontWeight: FontWeight.w700,
                      ),
                    ),
                  ),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.bsnsPurpsDtls ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 1.w > 1.h ? 32.sp : 52.sp,
                      fontFamily: 'Pretendard',
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                        'ÏÇ¨ÏóÖÍ∑úÎ™®',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Color(0xFF1D1D1D),
                          fontSize: 1.w > 1.h ? 30.sp : 50.sp,
                          fontWeight: FontWeight.w700,
                        ),
                      )),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.bsnsScaleInfo ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 1.w > 1.h ? 32.sp : 52.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
          TableRow(
            children: [
              TableCell(
                verticalAlignment: TableCellVerticalAlignment.fill,
                child: Container(
                  width: 200.w,
                  decoration: BoxDecoration(
                    color: Color(0xFFE5E8ED),
                    border: Border.all(color: gray300),
                  ),
                  child: Center(
                      child: AutoSizeText(
                        'Í∑ºÍ±∞Î≤ïÎ†π',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Color(0xFF1D1D1D),
                          fontSize: 1.w > 1.h ? 30.sp : 50.sp,
                          fontWeight: FontWeight.w700,
                        ),
                      )),
                ),
              ),
              TableCell(
                child: Container(
                  padding: const EdgeInsets.all(8.0),
                  color: Colors.white,
                  child: AutoSizeText(
                    controller.selectBsnsPlan.value.bsnsBasisLawordInfo ?? '-',
                    style: TextStyle(
                      color: Color(0xFF555555),
                      fontSize: 1.w > 1.h ? 32.sp : 52.sp,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// [gridColumn] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú Ïª¨Îüº
  GridColumn gridColumn(String columnName, String label, {bool? isVisble, double? width}) {
    return GridColumn(
        //width: controller.columnWidths[columnName ?? ''] ?? 80,
        //width: controller.columnWidths[columnName] ?? width ?? 80,
        width: width ?? double.nan,
        columnName: columnName,
        visible: isVisble ?? true,
        label: SizedBox(child: Center(child: AutoSizeText(label, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 30.sp, color: tableTextColor)))));
  }

  ///  ÏÇ¨ÏóÖÏÑ†ÌÉù -> ÏÇ¨ÏóÖÍµ¨Ïó≠ ÏÑ†ÌÉù
  Widget buildBsnsSelectAreaListDataGrid() {
    return CustomGrid(
      dataSource: controller.bsnsListDataSource.value,
      controller: controller.bsnsListDataGridController,
      isSort: false,
      //columnWidthMode: ColumnWidthMode.fill,
      columns: [
        gridColumn('bsnsZoneNo', 'ÏÇ¨ÏóÖÍµ¨Ïó≠\nÎ≤àÌò∏', width: 60),
        gridColumn('bsnsZoneNm', 'ÏÇ¨ÏóÖÍµ¨Ïó≠Î™Ö', width: 200),
        gridColumn('lotCnt', 'ÌïÑÏßÄÏàò', width: 60),
        gridColumn('bsnsAra', 'Î©¥Ï†Å(„é°)', width: 80),
        gridColumn('bsnsReadngPblancDe', 'Ïó¥ÎûåÍ≥µÍ≥†Ïùº'),
      ],
      selectionEvent: ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) async {

        if (addedRows.isEmpty) return;

        final index = controller.bsnsListDataSource.value.rows.indexOf(addedRows.first);
        var getRow = controller.bsnsListDataSource.value.rows[index];

        var bsnsNo = controller.selectBsnsPlan.value.bsnsNo;
        var bsnsZoneNo = getRow.getCells()[0].value;
        var bsnsZoneNm = getRow.getCells()[1].value;
        var lotCnt = getRow.getCells()[2].value;
        var bsnsAra = getRow.getCells()[3].value;
        var bsnsReadngPblancDe = getRow.getCells()[4].value;

        debugPrint('ÏÇ¨ÏóÖÍµ¨Ïó≠ ÏÑ†ÌÉù: $bsnsNo, $bsnsZoneNo, $bsnsZoneNm, $lotCnt, $bsnsAra, $bsnsReadngPblancDe');

        debugPrint('ÏÑ†ÌÉùÎêú ÏÇ¨ÏóÖÎ≤àÌò∏: ${controller.selectBsnsPlan.value.bsnsNo}');
        debugPrint('ÏÑ†ÌÉùÎêú ÏÇ¨ÏóÖÍµ¨Ïó≠Î≤àÌò∏: $bsnsZoneNo');

        controller.selectedBsnsSelectArea.value = BsnsPlanSelectAreaModel(
          bsnsNo: num.parse(bsnsNo.toString()),
          bsnsZoneNo: bsnsZoneNo,
          bsnsZoneNm: bsnsZoneNm,
          lotCnt: num.parse(lotCnt.toString()),
          bsnsAra: bsnsAra.toString(),
          bsnsReadngPblancDe: bsnsReadngPblancDe,
        );

        await controller.autoSqnc();

        controller.isBsnsZoneSelectFlag.value = true;
        controller.isBsnsSqncSelectFlag.value = false;

      }),
    );
  }

  // ÏÇ¨ÏóÖÏÑ†ÌÉù -> Ï°∞ÏÇ¨ Ï∞®Ïàò
  Widget buildBsnsSqncDataGrid() {
    return CustomGrid(
      dataSource: controller.bsnsAccdtinvstgSqncDataSource.value,
      controller: controller.bsnsOrderDataGridController,
      columnWidthMode: ColumnWidthMode.auto,
      isSelect: false,
      isSort: false,
      columns: [
        gridColumn('bsnsNo', 'ÏÇ¨ÏóÖÎ≤àÌò∏', isVisble: false),
        gridColumn('bsnsZoneNo', 'ÏÇ¨ÏóÖÍµ¨Ïó≠Î≤àÌò∏', isVisble: false),
        gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 60),
        gridColumn('accdtInvstgNm', 'Ï°∞ÏÇ¨Î™Ö', width: 200),
        gridColumn('delYn', 'ÏÇ≠Ï†úÏó¨Î∂Ä', isVisble: false),
        gridColumn('frstRgstrId', 'ÏµúÏ¥àÎì±Î°ùÏûê'),
        gridColumn('frstRegistDt', 'Îì±Î°ùÏùº'),
        gridColumn('lastUpdusrId', 'ÏµúÏ¢ÖÏàòÏ†ïÏûê'),
        gridColumn('lastUpdtDt', 'ÏàòÏ†ïÏùº'),
        gridColumn('conectIp', 'Ï†ëÏÜçIP', isVisble: false),
      ],
    );
  }

  /// ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨ -> ÏÜåÏú†ÏûêÍ≤ÄÏÉâ
  Widget buildBsnsOwnerDataGrid() {
    return CustomGrid(
      dataSource: controller.bsnsOwnerDataSource.value,
      controller: controller.bsnsOwnerDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.fill,
      selectionEvent: ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {
        debugPrint('buildBsnsOwnerDataGrid> ÏÑ†ÌÉùÎêú ÏÜåÏú†ÏûêÎ≤àÌò∏ > ${addedRows.first.getCells()[0].value}');
        var ownerNum = addedRows.first.getCells()[0].value;

        controller.fetchOwnerLadInfoDataSource(ownerNum);
        controller.fetchOwnerObstInfoDataSource(ownerNum);
        controller.fetchOwnerInfo(ownerNum);

        controller.bsnsOwnerTabController.animateTo(1);
      }),
      columns: [
        gridColumn('ownerNo', 'ÏÜåÏú†ÏûêÎ≤àÌò∏', width: 100),
        gridColumn('ownerNm', 'ÏÜåÏú†ÏûêÎ™Ö', width: 180),
        // gridColumn('posesnDivCd', 'ÏÜåÏú†ÏûêÍµ¨Î∂Ñ', width: 60),
        gridColumn('posesnDivNm', 'ÏÜåÏú†ÏûêÍµ¨Î∂Ñ', width: 60),
        // gridColumn('bsnsNo', 'ÏÇ¨ÏóÖÎ≤àÌò∏', isVisble: false),
        // gridColumn('bsnsZoneNo', 'ÏÇ¨ÏóÖÍµ¨Ïó≠Î≤àÌò∏', isVisble: false),
        gridColumn('ownerRgsbukAddr', 'Îì±Í∏∞Î∂ÄÏ£ºÏÜå', width: 400),
        gridColumn('ownerRrnEnc', 'Ï£ºÎØºÎì±Î°ùÎ≤àÌò∏', width: 90),
        // gridColumn('oldRegno', 'Íµ¨Ï£ºÎØºÎì±Î°ùÎ≤àÌò∏', isVisble: false),
        gridColumn('ownerTelno', 'Ï†ÑÌôîÎ≤àÌò∏', width: 80),
        gridColumn('ownerMbtlnum', 'Ìú¥ÎåÄÌè∞Î≤àÌò∏', width: 80),
        // gridColumn('rgsbukZip', 'Îì±Í∏∞Î∂ÄÎ≤àÏßÄ', isVisble: false),
        // gridColumn('delvyZip', 'Ï†ÑÏÜ°Î∂ÄÎ≤àÏßÄ', isVisble: false),
        // gridColumn('moisZip', 'Î™®ÏûÑÎ∂ÄÎ≤àÏßÄ', isVisble: false),
        // gridColumn('ownerDelvyAddr', 'Ï†ÑÏÜ°Î∂ÄÏ£ºÏÜå', isVisble: false),
        // gridColumn('ownerMoisAddr', 'Î™®ÏûÑÎ∂ÄÏ£ºÏÜå', isVisble: false),
        // gridColumn('accdtInvstgRm', 'Ï°∞ÏÇ¨Ïã§', isVisble: false),
        // gridColumn('frstRgstrId', 'ÏµúÏ¥àÎì±Î°ùÏûê', isVisble: false),
        // gridColumn('frstRegistDt', 'Îì±Î°ùÏùº', isVisble: false),
        // gridColumn('lastUpdusrId', 'ÏµúÏ¢ÖÏàòÏ†ïÏûê', isVisble: false),
        // gridColumn('lastUpdtDt', 'ÏàòÏ†ïÏùº', isVisble: false),
        // gridColumn('conectIp', 'Ï†ëÏÜçIP', isVisble: false),
        // gridColumn('thingCnt', 'Î¨ºÍ±¥Ïàò', isVisble: false),
        // gridColumn('bsnsCnt', 'ÏÇ¨ÏóÖÏàò', isVisble: false),
        // gridColumn('realOwnerNo', 'Ïã§ÏÜåÏú†ÏûêÎ≤àÌò∏', isVisble: false),
        // gridColumn('ownerDivCd', 'ÏÜåÏú†ÏûêÍµ¨Î∂Ñ', isVisble: false),
        // gridColumn('ownerRgsbukAddrFull', 'Îì±Í∏∞Î∂ÄÏ£ºÏÜåÏ†ÑÏ≤¥', isVisble: false),
        // gridColumn('ownerDelvyAddrFull', 'Ï†ÑÏÜ°Î∂ÄÏ£ºÏÜåÏ†ÑÏ≤¥', isVisble: false),
        // gridColumn('ownerMoisAddrFull', 'Î™®ÏûÑÎ∂ÄÏ£ºÏÜåÏ†ÑÏ≤¥', isVisble: false),
      ],
    );
  }

  /// ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨ -> ÏÜåÏú†ÏûêÍ≤ÄÏÉâ -> ÌÜ†ÏßÄ
  Widget buildOwnerLadInfoDataGrid() {
    return CustomGrid(
      dataSource: controller.ownerLadInfoDataSource.value,
      controller: controller.ownerLadInfoDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.fitByColumnName,
      freezeColumnCount: 4,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['ofcbkLndcgrDivNm', 'sttusLndcgrDivNm'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÎ™©',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
          StackedHeaderCell(
              columnNames: ['ofcbkAra', 'incrprAra', 'cmpnstnInvstgAra'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î©¥Ï†Å(„é°)',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D))))),
        ]),
      ],
      selectionEvent: ((List<DataGridRow> addedRows, List<DataGridRow> removedRows) {

        final index = controller.ownerLadInfoDataSource.value.rows.indexOf(addedRows.first);
        var getRow = controller.ownerLadInfoDataSource.value.rows[index];

       var data = OwnerLadInfoDatasourceModel(
          lgdongNm: getRow.getCells()[0].value,
          lcrtsDivCd: getRow.getCells()[1].value,
          mlnoLtno: getRow.getCells()[2].value,
          slnoLtno: getRow.getCells()[3].value,
          ofcbkLndcgrDivCd: getRow.getCells()[4].value,
          sttusLndcgrDivCd: getRow.getCells()[5].value,
          ofcbkAra: getRow.getCells()[6].value,
          incrprAra: getRow.getCells()[7].value,
          cmpnstnInvstgAra: getRow.getCells()[8].value,
          acqsPrpDivCd: getRow.getCells()[9].value,
          aceptncUseDivCd: getRow.getCells()[10].value,
          accdtInvstgSqnc: getRow.getCells()[11].value,
          invstgDt: getRow.getCells()[12].value,
          cmpnstnStepDivCd: getRow.getCells()[13].value,
          cmpnstnDtaChnStatDivCd: getRow.getCells()[13].value,
          accdtInvstgRm: getRow.getCells()[14].value,
        );

        // var num = data.accdtInvstgSqnc;
        // controller.selectedOwnerLadInfoData.value = data;
        // controller.fetchAccdtlnvstgOwnerDataSource();
        // controller.handleAccdtlnvstgLadTabSelected(1);

      }),
      columns: [
        gridColumn('lgdongNm', 'ÏÜåÏû¨ÏßÄ', width: 200),
        gridColumn('lcrtsDivCd', 'ÌäπÏßÄ', width: 60),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à', width: 60),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à', width: 60),
        gridColumn('ofcbkLndcgrDivNm', 'Í≥µÎ∂Ä', width: 80),
        gridColumn('sttusLndcgrDivNm', 'ÌòÑÌô©', width: 80),
        gridColumn('ofcbkAra', 'Í≥µÎ∂Ä', width: 80),
        gridColumn('incrprAra', 'Ìé∏ÏûÖ', width: 80),
        gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨', width: 80),
        gridColumn('acqsPrpDivNm', 'Ï∑®ÎìùÏö©ÎèÑ', width: 80),
        gridColumn('aceptncUseDivNm', 'ÏàòÏö©/ÏÇ¨Ïö©', width: 60),
        gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 60),
        gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº', width: 80),
        gridColumn('cmpnstnStepDivCdNm', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ', width: 80),
        gridColumn('eaccdtInvstgRmtc', 'ÎπÑÍ≥†', width: 80),
      ],
    );
  }

  /// ÏÜåÏú†ÏûêÍ¥ÄÎ¶¨ -> ÏÜåÏú†ÏûêÍ≤ÄÏÉâ -> ÏßÄÏû•Î¨º
  Widget buildOwnerObstInfoDataGrid() {
    return CustomGrid(
      dataSource: controller.ownerObstInfoDataSource.value,
      controller: controller.ownerObstInfoDataGridController,
      columnWidthMode: ColumnWidthMode.fill,
      freezeColumnCount: 4,
      isSort: false,
      columns: [
        gridColumn('lgdongNm', 'ÏÜåÏû¨ÏßÄ', width: 200),
        gridColumn('lcrtsDivCd', 'ÌäπÏßÄ', width: 60),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à', width: 60),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à', width: 60),
        gridColumn('cmpnstnObstNo', 'ÏßÄÏû•Î¨ºÏàúÎ≤à', width: 80),
        gridColumn('obstDivNm', 'ÏßÄÏû•Î¨ºÍµ¨Î∂Ñ', width: 80),
        gridColumn('cmpnstnThingKndDtls', 'Î¨ºÍ±¥ÏùòÏ¢ÖÎ•ò', width: 80),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞ Î∞è Í∑úÍ≤©', width: 80),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâ(Î©¥Ï†Å)', width: 80),
        gridColumn('cmpnstnThingUnitDivNm', 'Îã®ÏúÑ', width: 60),
        gridColumn('acqsPrpDivCd', 'Ï∑®ÎìùÏö©ÎèÑ', width: 80),
        gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò', width: 60),
        gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº', width: 80),
        gridColumn('cmpnstnStepDivNm', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ', width: 80),
        gridColumn('spcitm', 'ÌäπÏù¥ÏÇ¨Ìï≠', width: 80),
      ],
    );
  }

  // Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÌÜ†ÏßÄÎ≥¥ÏÉÅ ÎåÄÏÉÅ Í∏∞Ï§Ä Ï†ïÎ≥¥
  Widget buildAccdtlnvstgDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgLadDataSource.value,
      controller: controller.accdtlnvstgLadDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.fitByColumnName,
      freezeColumnCount: 6,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['col1', 'col2', 'col3', 'col4', 'col5', 'col6'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÌÜ†ÏßÄÎ≥¥ÏÉÅ ÎåÄÏÉÅ Í∏∞Ï§Ä Ï†ïÎ≥¥',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['col7', 'col8'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÎ™©',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['col9', 'col10'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î©¥Ï†Å(„é°)',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
        ]),
      ],
      columns: [
        gridColumn('col1', 'Í±¥Ï∂ïÎ¨ºÎåÄÏû•\nÎÇ¥Ïö©ÌôïÏù∏'),
        gridColumn('col2', 'Í±¥Ï∂ïÎ¨ºÍ∞úÏàò'),
        gridColumn('col3', 'ÏÜåÏû¨ÏßÄ'),
        gridColumn('col4', 'ÌäπÏßÄ'),
        gridColumn('col5', 'Î≥∏Î≤à'),
        gridColumn('col6', 'Î∂ÄÎ≤à'),
        gridColumn('col7', 'Í≥µÎ∂Ä'),
        gridColumn('col8', 'ÌòÑÌô©'),
        gridColumn('col9', 'Í≥µÎ∂Ä'),
        gridColumn('col10', 'Ìé∏ÏûÖ'),
        gridColumn('col11', 'Ï°∞ÏÇ¨'),
        gridColumn('col12', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('col13', 'ÏàòÏö©/ÏÇ¨Ïö©'),
        gridColumn('col14', 'Ï°∞ÏÇ¨Ï∞®Ïàò'),
        gridColumn('col15', 'Ï°∞ÏÇ¨Ïùº'),
        gridColumn('col16', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ'),
        gridColumn('col17', 'ÎπÑÍ≥†'),
      ],
    );
  }

  /// Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÏÜåÏú†Ïûê
  Widget buildAccdtlnvstgOwnerDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgOwnerLadDataSource.value,
      controller: controller.accdtlnvstgLadOwnerDataGridController,
      isSort: false,
      columns: [
        gridColumn('lgdongNm', 'ÏÜåÏû¨ÏßÄ'),
        gridColumn('lcrtsDivCd', 'ÌäπÏßÄ'),
        gridColumn('mlnoLtno', 'Î≥∏Î≤à'),
        gridColumn('slnoLtno', 'Î∂ÄÎ≤à'),
        gridColumn('ofcbkLndcgrDivCd', 'Í≥µÎ∂Ä'),
        gridColumn('sttusLndcgrDivCd', 'ÌòÑÌô©'),
        gridColumn('ofcbkAra', 'Í≥µÎ∂Ä'),
        gridColumn('incrprAra', 'Ìé∏ÏûÖ'),
        gridColumn('cmpnstnInvstgAra', 'Ï°∞ÏÇ¨'),
        gridColumn('acqsPrpDivCd', 'Ï∑®ÎìùÏö©ÎèÑ'),
        gridColumn('aceptncPrpDivCd', 'ÏàòÏö©/ÏÇ¨Ïö©'),
        gridColumn('accdtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò'),
        gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº'),
        gridColumn('cmpnstnDtaChnStatDivCd', 'Î≥¥ÏÉÅÏßÑÌñâÎã®Í≥Ñ'),
        gridColumn('etc', 'ÎπÑÍ≥†'),
      ],
    );
  }

  /// Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÏÜåÏú†Ïûê/Í¥ÄÍ≥ÑÏù∏ -> ÏÜåÏú†Ïûê ÌòÑÌô©
  Widget buildAccdtlnvstgLadOwnerStatusDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgLadOwnerDataSource.value,
      controller: controller.accdtlnvstgLadOwnerDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.fill,
      columns: [
        gridColumn('ownerNo', 'ÏÜåÏú†ÏûêÎ≤àÌò∏'),
        gridColumn('ladLdgrOwnerNm', 'ÏÜåÏú†ÏûêÎ™Ö'),
        gridColumn('ladLdgrPosesnDivCd', 'ÏÜåÏú†ÏûêÍµ¨Î∂Ñ'),
        gridColumn('ownerTypeDetail', 'ÏßÄÎ∂ÑÎ∂ÑÏûê'),
        gridColumn('ownerDetail2', 'ÏßÄÎ∂ÑÎ∂ÑÎ™®'),
        gridColumn('ownerRegisterNo', 'Îì±Î°ùÎ≤àÌò∏'),
      ],
    );
  }

  /// Ïã§ÌÉúÏ°∞ÏÇ¨ -> ÌÜ†ÏßÄ -> ÏÜåÏú†Ïûê/Í¥ÄÍ≥ÑÏù∏ -> Í¥ÄÍ≥ÑÏù∏ ÌòÑÌô©
  Widget buildAccdtlnvstgLadPartcpntStatusDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgLadPartcpntDataSource.value,
      controller: controller.accdtlnvstgLadPartcpntDataGridController,
      isSort: false,
      columnWidthMode: ColumnWidthMode.fill,
      columns: [
        gridColumn('ownerNo', 'ÏÜåÏú†ÏûêÎ≤àÌò∏'),
        gridColumn('ownerName', 'Í¥ÄÍ≥ÑÍµ¨Î∂Ñ'),
        gridColumn('ownerType', 'ÏÑ±Î™Ö'),
        gridColumn('ownerTypeDetail', 'Ï£ºÏÜå'),
        gridColumn('ownerDetail2', 'Ïö∞Ìé∏Î≤àÌò∏'),
        gridColumn('ownerRegisterNo', 'Ï†ÑÌôîÎ≤àÌò∏'),
      ],
    );
  }

  /// [buildAccdtlnvstgObstDataGrid] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú
  /// [Ïã§ÌÉúÏ°∞ÏÇ¨ > ÏßÄÏû•Î¨ºÌòÑÌô©]
  Widget buildAccdtlnvstgObstDataGrid() {
    return CustomGrid(
      dataSource: controller.accdtlnvstgObstDataSource.value,
      controller: controller.accdtlnvstgObstDataGridController,
      isSort: false,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['invstrEmpNo', 'invstrJgrdNm', 'invstrNm'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ï°∞ÏÇ¨Ïûê',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 12.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['obsrverNm', 'accdtInvstgObsrverAddr'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏûÖÌöåÏûê',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 12.sp,
                          color: Color(0xFF1D1D1D),)))),
        ]),
      ],
      columns: [
        gridColumn('obstSeq', 'ÏßÄÏû•Î¨ºÏàúÎ≤à'),
        gridColumn('obstDivCd', 'ÏßÄÏû•Î¨ºÍµ¨Î∂Ñ'),
        gridColumn('cmpnstnThingKndDtls', 'Î¨ºÍ±¥ÏùòÏ¢ÖÎ•ò'),
        gridColumn('obstStrctStndrdInfo', 'Íµ¨Ï°∞ Î∞è Í∑úÍ≤©'),
        gridColumn('cmpnstnQtyAraVu', 'ÏàòÎüâ(Î©¥Ï†Å)'),
        gridColumn('cmpnstnThingUnitDivCd', 'Îã®ÏúÑ'),
        gridColumn('invstrEmpNo', 'ÏÇ¨Î≤à'),
        gridColumn('invstrJgrdNm', 'ÏßÅÍ∏â'),
        gridColumn('invstrNm', 'ÏÑ±Î™Ö'),
        gridColumn('obsrverNm', 'ÏÑ±Î™Ö'),
        gridColumn('accdtInvstgObsrverAddr', 'Ï£ºÏÜå'),
        gridColumn('acddtInvstgSqnc', 'Ï°∞ÏÇ¨Ï∞®Ïàò'),
        gridColumn('invstgDt', 'Ï°∞ÏÇ¨Ïùº'),
        gridColumn('spcitm', 'ÎπÑÍ≥†'),
      ],
    );
  }

  /// [buildAccdtlnvstgObstDataGrid] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú
  /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥ > ÌÜ†ÏßÄÌòÑÌô©Ï°∞Ìöå]
  Widget buildLadSttusInqireDataGrid(List<GridColumn> columns) {
    return CustomGrid(
      dataSource: controller.ladSttusInqireDataSource.value,
      controller: controller.ladSttusInqireDataGridController,
      columnWidthMode: ColumnWidthMode.fill,
      isSort: false,
      freezeColumnCount: 4,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['lgdongNm', 'lcrtsDivCd', 'mlnoLtno', 'slnoLtno'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÌÜ†ÏßÄÍ∏∞Î≥∏Ï†ïÎ≥¥',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['ofcbkLndcgrDivCd', 'sttusLndcgrDivCd'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏßÄÎ™©',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['ofcbkAra', 'incrprAra'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î©¥Ï†Å(„é°)',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['aceptncUseDivCd', 'invstgDt', 'accdtInvstgSqnc'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ïã§ÌÉúÏ°∞ÏÇ¨',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['ownerNo', 'posesnDivCd', 'ownerNm', 'ownerRgsbukAddr', 'posesnShreNmrtrInfo', 'posesnShreDnmntrInfo'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏÜåÏú†ÏûêÏ†ïÎ≥¥',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtDivCd', 'apasmtSqnc', 'prcPnttmDe'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Í∞êÏ†ïÌèâÍ∞Ä',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttNm1', 'apasmtInsttEvlUpc1', 'apasmtInsttEvlAmt1'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('AÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttNm2', 'apasmtInsttEvlUpc2', 'apasmtInsttEvlAmt2'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('BÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttNm3', 'apasmtInsttEvlUpc3', 'apasmtInsttEvlAmt3'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('CÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['cmpnstnCmptnUpc', 'cpsmnCmptnAmt'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î≥¥ÏÉÅÎπÑÏÇ∞Ï†ï',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['caPymntRequstDe', 'cmpnstnDscssUpc', 'cmpnstnDscssTotAmt', 'caRgistDt'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î≥¥ÏÉÅÎπÑÏßÄÍ∏â',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['aceptncAdjdcUpc', 'aceptncAdjdcAmt', 'aceptncAdjdcDt', 'aceptncUseBeginDe', 'ldPymntRequstDe', 'ldRgistDt', 'ldCpsmnPymntLdgmntDivCd'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏàòÏö©Ïû¨Í≤∞',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['obadUpc', 'objcRstAmt', 'objcAdjdcDt', 'proPymntRequstDe', 'proCpsmnPymntLdgmntDivCd'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ïù¥ÏùòÏû¨Í≤∞',
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 30.sp,
                          color: Color(0xFF1D1D1D),)))),
        ]),
      ],
      columns: columns,
    );
  }

  /// [buildAccdtlnvstgObstDataGrid] Îç∞Ïù¥ÌÑ∞Í∑∏Î¶¨Îìú
  /// [ÌÜµÍ≥ÑÏ†ïÎ≥¥ > ÏßÄÏû•Î¨ºÌòÑÌô©Ï°∞Ìöå]
  Widget buildObstSttusInqireDataGrid(List<GridColumn> columns) {
    return CustomGrid(
      dataSource: controller.obstSttusInqireDataSource.value,
      controller: controller.ladSttusInqireDataGridController,
      columnWidthMode: ColumnWidthMode.fill,
      isSort: false,
      freezeColumnCount: 4,
      stackedHeaderRows: [
        StackedHeaderRow(cells: [
          StackedHeaderCell(
              columnNames: ['lgdongNm', 'lcrtsDivCd', 'mlnoLtno', 'slnoLtno'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÌÜ†ÏßÄÍ∏∞Î≥∏Ï†ïÎ≥¥',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['rqest', 'invstgDe', 'accdtInvstgSqnc'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ïã§ÌÉúÏ°∞ÏÇ¨',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['ownerNo', 'posesnDivCd', 'ownerNm', 'ownerRgsbukAddr', 'posesnShreNmrtrInfo', 'posesnShreDnmntrInfo'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏÜåÏú†ÏûêÏ†ïÎ≥¥',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtReqestDivCd', 'apasmtSqnc', 'prcPnttmDe'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Í∞êÏ†ïÌèâÍ∞Ä',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttNm1', 'apasmtInsttEvlUpc1', 'apasmtInsttEvlAmt1'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('AÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttNm2', 'apasmtInsttEvlUpc2', 'apasmtInsttEvlAmt2'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('BÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['apasmtInsttNm3', 'apasmtInsttEvlUpc3', 'apasmtInsttEvlAmt3'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('CÌèâÍ∞ÄÎ≤ïÏù∏',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['cmpnstnCmptnUpc', 'cpsmnCmptnAmt'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î≥¥ÏÉÅÎπÑÏÇ∞Ï†ï',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['caPymntRequstDe', 'cmpnstnDscssUpc', 'cmpnstnDscssTotAmt'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Î≥¥ÏÉÅÎπÑÏßÄÍ∏â',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['dcsUpc', 'dcsAmt', 'dcsDt', 'aceptncUseBeginDe', 'ldPymntRequstDe', 'ldCpsmnPymntLdgmntDivCd'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('ÏàòÏö©Ïû¨Í≤∞',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
          StackedHeaderCell(
              columnNames: ['proUpc', 'proAmt', 'proDt', 'proPymntRequstDe', 'proCpsmnPymntLdgmntDivCd'],
              child: Container(
                  alignment: Alignment.center,
                  child: AutoSizeText('Ïù¥ÏùòÏû¨Í≤∞',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 30.sp,
                        color: Color(0xFF1D1D1D),)))),
        ]),
      ],
      columns: columns,
    );
  }

  /// [buildBsnsRadio] ÎùºÎîîÏò§ Î≤ÑÌäº
  Widget buildBsnsRadio() {
    return Container(
      //color: Colors.green,
      width: double.infinity,
      child: FittedBox(
        fit: BoxFit.scaleDown,
        alignment: Alignment.topLeft,
        child: Row(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            SizedBox(width: 120.w, child: AutoSizeText('ÏÇ¨ÏóÖÍµ¨Î∂Ñ', style: TextStyle(color: tableTextColor, fontSize: 1.w > 1.h ? 32.sp : 22.sp, fontWeight: FontWeight.w500))),
            SizedBox(width: 20.w),
            CustomRadio(
              value: 0,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 0);
              },
              label: 'Îåê',
            ),
            CustomRadio(
              value: 1,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 1);
              },
              label: 'ÏàòÎèÑÏö©ÏßÄ',
            ),
            CustomRadio(
              value: 2,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 2);
              },
              label: 'ÌÉùÏßÄÍ∞úÎ∞ú',
            ),
            CustomRadio(
              value: 3,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 3);
              },
              label: 'Í∏∞ÌÉÄ',
            ),
          ],
        ),
      ),
    );
  }

  /// [buildOwnerMngRadio] ÎùºÎîîÏò§ Î≤ÑÌäº
  Widget buildOwnerMngRadio() {
    return Container(
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            width: 40.w,
            height: 40.h,
            child: Radio(
              value: 0,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 0);
              },
            ),
          ),
          SizedBox(width: 16.w),
          AutoSizeText('ÏÜåÏú†Ïûê',
              style: TextStyle(
                  fontSize: 30.sp,
                  fontWeight: FontWeight.w400,
                  color: tableTextColor)),
          SizedBox(width: 40.w),
          Container(
            width: 40.w,
            height: 40.h,
            child: Radio(
              value: 1,
              groupValue: controller.radioValue.value,
              onChanged: (value) {
                controller.handleRadioValueChange(value ?? 1);
              },
            ),
          ),
          SizedBox(width: 16.w),
          AutoSizeText('Í¥ÄÍ≥ÑÏù∏',
              style: TextStyle(
                  fontSize: 30.sp,
                  fontWeight: FontWeight.w400,
                  color: tableTextColor)),
        ],
      ),
    );
  }
}
